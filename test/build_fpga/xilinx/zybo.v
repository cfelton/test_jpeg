// File: zybo.v
// Generated by MyHDL 1.0dev
// Date: Sun Jul 17 06:02:07 2016


`timescale 1ns/10ps

module zybo (
    clock,
    sdi,
    sdo
);
// This is a top-level wrapper around the jpegenc DCT2.
// 
// This module is used to simply test the synthesis results 
// of the DCT2 subblock.  This module (block) is not functional,
// the ouptut will not be captured (probably) but this block 
// maintains all the of the inputs and outputs.

input clock;
input sdi;
output sdo;
reg sdo;

wire crf_data_valid;
wire cb_data_valid;
reg valid;
wire [7:0] cb_data_in;
wire y_data_valid;
wire cbf_data_valid;
wire [7:0] cr_data_in;
wire [7:0] y_data_in;
wire yf_data_valid;
wire cr_data_valid;
wire reset;
reg [17:0] io_stub_1_scnt;
reg io_stub_1_irei;
reg io_stub_1_oreo;
reg signed [8:0] dct_2d_3_input_1d_stage_1_data_in;
wire dct_2d_3_outputs_data_valid;
reg dct_2d_3_data_valid_reg;
reg dct_2d_3_input_1d_stage_1_data_valid;
reg signed [8:0] dct_2d_3_data_in_signed;
reg [2:0] dct_2d_3_counter;
reg dct_2d_3_data_valid_reg2;
reg dct_2d_3_dct_1d_20_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_20_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_20_input_interface_data_in;
reg dct_2d_3_dct_1d_20_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_20_data_in_reg;
wire dct_2d_3_dct_1d_20_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_20_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_315_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_316_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_317_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_318_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_319_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_320_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_321_a;
wire signed [10:0] dct_2d_3_dct_1d_20_assign_array_20_assign_322_a;
wire signed [10:0] dct_2d_3_assign_323_b;
reg dct_2d_3_assign_324_b;
reg dct_2d_3_dct_1d_21_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_21_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_21_input_interface_data_in;
reg dct_2d_3_dct_1d_21_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_21_data_in_reg;
wire dct_2d_3_dct_1d_21_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_21_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_333_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_334_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_335_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_336_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_337_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_338_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_339_a;
wire signed [10:0] dct_2d_3_dct_1d_21_assign_array_21_assign_340_a;
wire signed [10:0] dct_2d_3_assign_341_b;
reg dct_2d_3_dct_1d_22_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_22_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_22_input_interface_data_in;
reg dct_2d_3_dct_1d_22_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_22_data_in_reg;
wire dct_2d_3_dct_1d_22_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_22_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_351_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_352_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_353_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_354_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_355_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_356_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_357_a;
wire signed [10:0] dct_2d_3_dct_1d_22_assign_array_22_assign_358_a;
wire signed [10:0] dct_2d_3_assign_359_b;
reg dct_2d_3_dct_1d_23_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_23_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_23_input_interface_data_in;
reg dct_2d_3_dct_1d_23_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_23_data_in_reg;
wire dct_2d_3_dct_1d_23_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_23_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_369_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_370_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_371_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_372_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_373_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_374_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_375_a;
wire signed [10:0] dct_2d_3_dct_1d_23_assign_array_23_assign_376_a;
wire signed [10:0] dct_2d_3_assign_377_b;
reg dct_2d_3_dct_1d_24_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_24_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_24_input_interface_data_in;
reg dct_2d_3_dct_1d_24_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_24_data_in_reg;
wire dct_2d_3_dct_1d_24_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_24_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_387_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_388_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_389_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_390_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_391_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_392_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_393_a;
wire signed [10:0] dct_2d_3_dct_1d_24_assign_array_24_assign_394_a;
wire signed [10:0] dct_2d_3_assign_395_b;
reg dct_2d_3_dct_1d_25_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_25_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_25_input_interface_data_in;
reg dct_2d_3_dct_1d_25_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_25_data_in_reg;
wire dct_2d_3_dct_1d_25_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_25_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_405_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_406_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_407_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_408_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_409_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_410_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_411_a;
wire signed [10:0] dct_2d_3_dct_1d_25_assign_array_25_assign_412_a;
wire signed [10:0] dct_2d_3_assign_413_b;
reg dct_2d_3_dct_1d_26_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_26_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_26_input_interface_data_in;
reg dct_2d_3_dct_1d_26_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_26_data_in_reg;
wire dct_2d_3_dct_1d_26_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_26_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_423_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_424_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_425_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_426_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_427_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_428_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_429_a;
wire signed [10:0] dct_2d_3_dct_1d_26_assign_array_26_assign_430_a;
wire signed [10:0] dct_2d_3_assign_431_b;
reg dct_2d_3_dct_1d_27_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_27_cycles_counter;
wire signed [10:0] dct_2d_3_dct_1d_27_input_interface_data_in;
reg dct_2d_3_dct_1d_27_output_interface_data_valid;
reg signed [10:0] dct_2d_3_dct_1d_27_data_in_reg;
wire dct_2d_3_dct_1d_27_input_interface_data_valid;
reg [2:0] dct_2d_3_dct_1d_27_inputs_counter;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_441_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_442_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_443_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_444_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_445_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_446_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_447_a;
wire signed [10:0] dct_2d_3_dct_1d_27_assign_array_27_assign_448_a;
wire signed [10:0] dct_2d_3_assign_449_b;
reg dct_2d_3_dct_1d_19_first_row_passed;
reg [3:0] dct_2d_3_dct_1d_19_cycles_counter;
reg signed [8:0] dct_2d_3_dct_1d_19_data_in_reg;
reg [2:0] dct_2d_3_dct_1d_19_inputs_counter;
reg signed [8:0] dct_2d_1_input_1d_stage_1_data_in;
wire dct_2d_1_outputs_data_valid;
reg dct_2d_1_data_valid_reg;
reg dct_2d_1_input_1d_stage_1_data_valid;
reg signed [8:0] dct_2d_1_data_in_signed;
reg [2:0] dct_2d_1_counter;
reg dct_2d_1_data_valid_reg2;
reg dct_2d_1_dct_1d_2_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_2_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_2_input_interface_data_in;
reg dct_2d_1_dct_1d_2_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_2_data_in_reg;
wire dct_2d_1_dct_1d_2_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_2_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_9_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_10_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_11_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_12_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_13_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_14_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_15_a;
wire signed [10:0] dct_2d_1_dct_1d_2_assign_array_2_assign_16_a;
wire signed [10:0] dct_2d_1_assign_17_b;
reg dct_2d_1_assign_18_b;
reg dct_2d_1_dct_1d_3_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_3_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_3_input_interface_data_in;
reg dct_2d_1_dct_1d_3_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_3_data_in_reg;
wire dct_2d_1_dct_1d_3_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_3_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_27_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_28_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_29_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_30_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_31_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_32_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_33_a;
wire signed [10:0] dct_2d_1_dct_1d_3_assign_array_3_assign_34_a;
wire signed [10:0] dct_2d_1_assign_35_b;
reg dct_2d_1_dct_1d_4_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_4_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_4_input_interface_data_in;
reg dct_2d_1_dct_1d_4_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_4_data_in_reg;
wire dct_2d_1_dct_1d_4_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_4_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_45_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_46_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_47_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_48_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_49_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_50_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_51_a;
wire signed [10:0] dct_2d_1_dct_1d_4_assign_array_4_assign_52_a;
wire signed [10:0] dct_2d_1_assign_53_b;
reg dct_2d_1_dct_1d_5_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_5_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_5_input_interface_data_in;
reg dct_2d_1_dct_1d_5_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_5_data_in_reg;
wire dct_2d_1_dct_1d_5_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_5_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_63_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_64_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_65_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_66_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_67_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_68_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_69_a;
wire signed [10:0] dct_2d_1_dct_1d_5_assign_array_5_assign_70_a;
wire signed [10:0] dct_2d_1_assign_71_b;
reg dct_2d_1_dct_1d_6_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_6_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_6_input_interface_data_in;
reg dct_2d_1_dct_1d_6_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_6_data_in_reg;
wire dct_2d_1_dct_1d_6_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_6_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_81_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_82_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_83_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_84_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_85_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_86_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_87_a;
wire signed [10:0] dct_2d_1_dct_1d_6_assign_array_6_assign_88_a;
wire signed [10:0] dct_2d_1_assign_89_b;
reg dct_2d_1_dct_1d_7_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_7_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_7_input_interface_data_in;
reg dct_2d_1_dct_1d_7_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_7_data_in_reg;
wire dct_2d_1_dct_1d_7_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_7_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_99_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_100_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_101_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_102_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_103_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_104_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_105_a;
wire signed [10:0] dct_2d_1_dct_1d_7_assign_array_7_assign_106_a;
wire signed [10:0] dct_2d_1_assign_107_b;
reg dct_2d_1_dct_1d_8_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_8_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_8_input_interface_data_in;
reg dct_2d_1_dct_1d_8_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_8_data_in_reg;
wire dct_2d_1_dct_1d_8_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_8_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_117_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_118_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_119_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_120_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_121_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_122_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_123_a;
wire signed [10:0] dct_2d_1_dct_1d_8_assign_array_8_assign_124_a;
wire signed [10:0] dct_2d_1_assign_125_b;
reg dct_2d_1_dct_1d_9_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_9_cycles_counter;
wire signed [10:0] dct_2d_1_dct_1d_9_input_interface_data_in;
reg dct_2d_1_dct_1d_9_output_interface_data_valid;
reg signed [10:0] dct_2d_1_dct_1d_9_data_in_reg;
wire dct_2d_1_dct_1d_9_input_interface_data_valid;
reg [2:0] dct_2d_1_dct_1d_9_inputs_counter;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_135_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_136_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_137_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_138_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_139_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_140_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_141_a;
wire signed [10:0] dct_2d_1_dct_1d_9_assign_array_9_assign_142_a;
wire signed [10:0] dct_2d_1_assign_143_b;
reg dct_2d_1_dct_1d_1_first_row_passed;
reg [3:0] dct_2d_1_dct_1d_1_cycles_counter;
reg signed [8:0] dct_2d_1_dct_1d_1_data_in_reg;
reg [2:0] dct_2d_1_dct_1d_1_inputs_counter;
reg signed [8:0] dct_2d_2_input_1d_stage_1_data_in;
wire dct_2d_2_outputs_data_valid;
reg dct_2d_2_data_valid_reg;
reg dct_2d_2_input_1d_stage_1_data_valid;
reg signed [8:0] dct_2d_2_data_in_signed;
reg [2:0] dct_2d_2_counter;
reg dct_2d_2_data_valid_reg2;
reg dct_2d_2_dct_1d_11_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_11_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_11_input_interface_data_in;
reg dct_2d_2_dct_1d_11_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_11_data_in_reg;
wire dct_2d_2_dct_1d_11_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_11_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_162_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_163_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_164_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_165_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_166_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_167_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_168_a;
wire signed [10:0] dct_2d_2_dct_1d_11_assign_array_11_assign_169_a;
wire signed [10:0] dct_2d_2_assign_170_b;
reg dct_2d_2_assign_171_b;
reg dct_2d_2_dct_1d_12_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_12_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_12_input_interface_data_in;
reg dct_2d_2_dct_1d_12_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_12_data_in_reg;
wire dct_2d_2_dct_1d_12_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_12_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_180_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_181_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_182_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_183_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_184_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_185_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_186_a;
wire signed [10:0] dct_2d_2_dct_1d_12_assign_array_12_assign_187_a;
wire signed [10:0] dct_2d_2_assign_188_b;
reg dct_2d_2_dct_1d_13_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_13_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_13_input_interface_data_in;
reg dct_2d_2_dct_1d_13_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_13_data_in_reg;
wire dct_2d_2_dct_1d_13_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_13_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_198_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_199_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_200_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_201_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_202_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_203_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_204_a;
wire signed [10:0] dct_2d_2_dct_1d_13_assign_array_13_assign_205_a;
wire signed [10:0] dct_2d_2_assign_206_b;
reg dct_2d_2_dct_1d_14_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_14_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_14_input_interface_data_in;
reg dct_2d_2_dct_1d_14_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_14_data_in_reg;
wire dct_2d_2_dct_1d_14_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_14_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_216_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_217_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_218_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_219_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_220_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_221_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_222_a;
wire signed [10:0] dct_2d_2_dct_1d_14_assign_array_14_assign_223_a;
wire signed [10:0] dct_2d_2_assign_224_b;
reg dct_2d_2_dct_1d_15_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_15_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_15_input_interface_data_in;
reg dct_2d_2_dct_1d_15_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_15_data_in_reg;
wire dct_2d_2_dct_1d_15_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_15_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_234_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_235_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_236_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_237_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_238_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_239_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_240_a;
wire signed [10:0] dct_2d_2_dct_1d_15_assign_array_15_assign_241_a;
wire signed [10:0] dct_2d_2_assign_242_b;
reg dct_2d_2_dct_1d_16_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_16_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_16_input_interface_data_in;
reg dct_2d_2_dct_1d_16_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_16_data_in_reg;
wire dct_2d_2_dct_1d_16_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_16_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_252_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_253_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_254_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_255_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_256_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_257_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_258_a;
wire signed [10:0] dct_2d_2_dct_1d_16_assign_array_16_assign_259_a;
wire signed [10:0] dct_2d_2_assign_260_b;
reg dct_2d_2_dct_1d_17_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_17_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_17_input_interface_data_in;
reg dct_2d_2_dct_1d_17_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_17_data_in_reg;
wire dct_2d_2_dct_1d_17_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_17_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_270_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_271_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_272_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_273_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_274_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_275_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_276_a;
wire signed [10:0] dct_2d_2_dct_1d_17_assign_array_17_assign_277_a;
wire signed [10:0] dct_2d_2_assign_278_b;
reg dct_2d_2_dct_1d_18_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_18_cycles_counter;
wire signed [10:0] dct_2d_2_dct_1d_18_input_interface_data_in;
reg dct_2d_2_dct_1d_18_output_interface_data_valid;
reg signed [10:0] dct_2d_2_dct_1d_18_data_in_reg;
wire dct_2d_2_dct_1d_18_input_interface_data_valid;
reg [2:0] dct_2d_2_dct_1d_18_inputs_counter;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_288_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_289_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_290_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_291_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_292_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_293_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_294_a;
wire signed [10:0] dct_2d_2_dct_1d_18_assign_array_18_assign_295_a;
wire signed [10:0] dct_2d_2_assign_296_b;
reg dct_2d_2_dct_1d_10_first_row_passed;
reg [3:0] dct_2d_2_dct_1d_10_cycles_counter;
reg signed [8:0] dct_2d_2_dct_1d_10_data_in_reg;
reg [2:0] dct_2d_2_dct_1d_10_inputs_counter;
reg [7:0] iports [0:3-1];
wire signed [10:0] cbf_out_sigs [0:64-1];
wire signed [10:0] yf_out_sigs [0:64-1];
wire signed [10:0] crf_out_sigs [0:64-1];
reg [1023:0] oports [0:192-1];
reg [1023:0] io_stub_1_oreg [0:192-1];
reg [7:0] io_stub_1_ireg [0:3-1];
reg signed [14:0] dct_2d_3_dct_1d_20_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_20_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_20_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_20_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_20_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_21_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_21_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_21_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_21_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_21_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_22_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_22_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_22_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_22_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_22_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_23_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_23_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_23_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_23_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_23_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_24_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_24_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_24_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_24_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_24_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_25_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_25_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_25_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_25_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_25_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_26_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_26_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_26_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_26_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_26_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_27_coeffs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_27_adder_reg [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_27_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_27_output_sigs [0:8-1];
reg signed [26:0] dct_2d_3_dct_1d_27_mux_flush [0:8-1];
reg signed [14:0] dct_2d_3_dct_1d_19_coeffs [0:8-1];
reg signed [24:0] dct_2d_3_dct_1d_19_adder_reg [0:8-1];
reg signed [24:0] dct_2d_3_dct_1d_19_mult_reg [0:8-1];
reg signed [10:0] dct_2d_3_dct_1d_19_output_sigs [0:8-1];
reg signed [24:0] dct_2d_3_dct_1d_19_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_2_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_2_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_2_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_2_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_2_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_3_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_3_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_3_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_3_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_3_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_4_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_4_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_4_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_4_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_4_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_5_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_5_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_5_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_5_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_5_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_6_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_6_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_6_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_6_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_6_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_7_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_7_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_7_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_7_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_7_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_8_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_8_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_8_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_8_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_8_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_9_coeffs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_9_adder_reg [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_9_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_9_output_sigs [0:8-1];
reg signed [26:0] dct_2d_1_dct_1d_9_mux_flush [0:8-1];
reg signed [14:0] dct_2d_1_dct_1d_1_coeffs [0:8-1];
reg signed [24:0] dct_2d_1_dct_1d_1_adder_reg [0:8-1];
reg signed [24:0] dct_2d_1_dct_1d_1_mult_reg [0:8-1];
reg signed [10:0] dct_2d_1_dct_1d_1_output_sigs [0:8-1];
reg signed [24:0] dct_2d_1_dct_1d_1_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_11_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_11_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_11_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_11_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_11_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_12_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_12_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_12_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_12_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_12_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_13_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_13_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_13_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_13_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_13_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_14_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_14_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_14_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_14_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_14_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_15_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_15_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_15_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_15_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_15_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_16_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_16_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_16_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_16_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_16_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_17_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_17_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_17_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_17_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_17_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_18_coeffs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_18_adder_reg [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_18_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_18_output_sigs [0:8-1];
reg signed [26:0] dct_2d_2_dct_1d_18_mux_flush [0:8-1];
reg signed [14:0] dct_2d_2_dct_1d_10_coeffs [0:8-1];
reg signed [24:0] dct_2d_2_dct_1d_10_adder_reg [0:8-1];
reg signed [24:0] dct_2d_2_dct_1d_10_mult_reg [0:8-1];
reg signed [10:0] dct_2d_2_dct_1d_10_output_sigs [0:8-1];
reg signed [24:0] dct_2d_2_dct_1d_10_mux_flush [0:8-1];

assign reset = 1'd1;


always @(posedge clock, negedge reset) begin: ZYBO_IO_STUB_1_BEH_SHIFTS
    integer ii;
    reg [8-1:0] tmp1;
    integer oo;
    reg [1024-1:0] tmp2;
    reg [8-1:0] tmp0;
    reg [1024-1:0] tmp3;
    if (reset == 0) begin
        io_stub_1_scnt <= 0;
        io_stub_1_ireg[0] <= 0;
        io_stub_1_ireg[1] <= 0;
        io_stub_1_ireg[2] <= 0;
        io_stub_1_oreo <= 0;
        valid <= 0;
        io_stub_1_oreg[0] <= 0;
        io_stub_1_oreg[1] <= 0;
        io_stub_1_oreg[2] <= 0;
        io_stub_1_oreg[3] <= 0;
        io_stub_1_oreg[4] <= 0;
        io_stub_1_oreg[5] <= 0;
        io_stub_1_oreg[6] <= 0;
        io_stub_1_oreg[7] <= 0;
        io_stub_1_oreg[8] <= 0;
        io_stub_1_oreg[9] <= 0;
        io_stub_1_oreg[10] <= 0;
        io_stub_1_oreg[11] <= 0;
        io_stub_1_oreg[12] <= 0;
        io_stub_1_oreg[13] <= 0;
        io_stub_1_oreg[14] <= 0;
        io_stub_1_oreg[15] <= 0;
        io_stub_1_oreg[16] <= 0;
        io_stub_1_oreg[17] <= 0;
        io_stub_1_oreg[18] <= 0;
        io_stub_1_oreg[19] <= 0;
        io_stub_1_oreg[20] <= 0;
        io_stub_1_oreg[21] <= 0;
        io_stub_1_oreg[22] <= 0;
        io_stub_1_oreg[23] <= 0;
        io_stub_1_oreg[24] <= 0;
        io_stub_1_oreg[25] <= 0;
        io_stub_1_oreg[26] <= 0;
        io_stub_1_oreg[27] <= 0;
        io_stub_1_oreg[28] <= 0;
        io_stub_1_oreg[29] <= 0;
        io_stub_1_oreg[30] <= 0;
        io_stub_1_oreg[31] <= 0;
        io_stub_1_oreg[32] <= 0;
        io_stub_1_oreg[33] <= 0;
        io_stub_1_oreg[34] <= 0;
        io_stub_1_oreg[35] <= 0;
        io_stub_1_oreg[36] <= 0;
        io_stub_1_oreg[37] <= 0;
        io_stub_1_oreg[38] <= 0;
        io_stub_1_oreg[39] <= 0;
        io_stub_1_oreg[40] <= 0;
        io_stub_1_oreg[41] <= 0;
        io_stub_1_oreg[42] <= 0;
        io_stub_1_oreg[43] <= 0;
        io_stub_1_oreg[44] <= 0;
        io_stub_1_oreg[45] <= 0;
        io_stub_1_oreg[46] <= 0;
        io_stub_1_oreg[47] <= 0;
        io_stub_1_oreg[48] <= 0;
        io_stub_1_oreg[49] <= 0;
        io_stub_1_oreg[50] <= 0;
        io_stub_1_oreg[51] <= 0;
        io_stub_1_oreg[52] <= 0;
        io_stub_1_oreg[53] <= 0;
        io_stub_1_oreg[54] <= 0;
        io_stub_1_oreg[55] <= 0;
        io_stub_1_oreg[56] <= 0;
        io_stub_1_oreg[57] <= 0;
        io_stub_1_oreg[58] <= 0;
        io_stub_1_oreg[59] <= 0;
        io_stub_1_oreg[60] <= 0;
        io_stub_1_oreg[61] <= 0;
        io_stub_1_oreg[62] <= 0;
        io_stub_1_oreg[63] <= 0;
        io_stub_1_oreg[64] <= 0;
        io_stub_1_oreg[65] <= 0;
        io_stub_1_oreg[66] <= 0;
        io_stub_1_oreg[67] <= 0;
        io_stub_1_oreg[68] <= 0;
        io_stub_1_oreg[69] <= 0;
        io_stub_1_oreg[70] <= 0;
        io_stub_1_oreg[71] <= 0;
        io_stub_1_oreg[72] <= 0;
        io_stub_1_oreg[73] <= 0;
        io_stub_1_oreg[74] <= 0;
        io_stub_1_oreg[75] <= 0;
        io_stub_1_oreg[76] <= 0;
        io_stub_1_oreg[77] <= 0;
        io_stub_1_oreg[78] <= 0;
        io_stub_1_oreg[79] <= 0;
        io_stub_1_oreg[80] <= 0;
        io_stub_1_oreg[81] <= 0;
        io_stub_1_oreg[82] <= 0;
        io_stub_1_oreg[83] <= 0;
        io_stub_1_oreg[84] <= 0;
        io_stub_1_oreg[85] <= 0;
        io_stub_1_oreg[86] <= 0;
        io_stub_1_oreg[87] <= 0;
        io_stub_1_oreg[88] <= 0;
        io_stub_1_oreg[89] <= 0;
        io_stub_1_oreg[90] <= 0;
        io_stub_1_oreg[91] <= 0;
        io_stub_1_oreg[92] <= 0;
        io_stub_1_oreg[93] <= 0;
        io_stub_1_oreg[94] <= 0;
        io_stub_1_oreg[95] <= 0;
        io_stub_1_oreg[96] <= 0;
        io_stub_1_oreg[97] <= 0;
        io_stub_1_oreg[98] <= 0;
        io_stub_1_oreg[99] <= 0;
        io_stub_1_oreg[100] <= 0;
        io_stub_1_oreg[101] <= 0;
        io_stub_1_oreg[102] <= 0;
        io_stub_1_oreg[103] <= 0;
        io_stub_1_oreg[104] <= 0;
        io_stub_1_oreg[105] <= 0;
        io_stub_1_oreg[106] <= 0;
        io_stub_1_oreg[107] <= 0;
        io_stub_1_oreg[108] <= 0;
        io_stub_1_oreg[109] <= 0;
        io_stub_1_oreg[110] <= 0;
        io_stub_1_oreg[111] <= 0;
        io_stub_1_oreg[112] <= 0;
        io_stub_1_oreg[113] <= 0;
        io_stub_1_oreg[114] <= 0;
        io_stub_1_oreg[115] <= 0;
        io_stub_1_oreg[116] <= 0;
        io_stub_1_oreg[117] <= 0;
        io_stub_1_oreg[118] <= 0;
        io_stub_1_oreg[119] <= 0;
        io_stub_1_oreg[120] <= 0;
        io_stub_1_oreg[121] <= 0;
        io_stub_1_oreg[122] <= 0;
        io_stub_1_oreg[123] <= 0;
        io_stub_1_oreg[124] <= 0;
        io_stub_1_oreg[125] <= 0;
        io_stub_1_oreg[126] <= 0;
        io_stub_1_oreg[127] <= 0;
        io_stub_1_oreg[128] <= 0;
        io_stub_1_oreg[129] <= 0;
        io_stub_1_oreg[130] <= 0;
        io_stub_1_oreg[131] <= 0;
        io_stub_1_oreg[132] <= 0;
        io_stub_1_oreg[133] <= 0;
        io_stub_1_oreg[134] <= 0;
        io_stub_1_oreg[135] <= 0;
        io_stub_1_oreg[136] <= 0;
        io_stub_1_oreg[137] <= 0;
        io_stub_1_oreg[138] <= 0;
        io_stub_1_oreg[139] <= 0;
        io_stub_1_oreg[140] <= 0;
        io_stub_1_oreg[141] <= 0;
        io_stub_1_oreg[142] <= 0;
        io_stub_1_oreg[143] <= 0;
        io_stub_1_oreg[144] <= 0;
        io_stub_1_oreg[145] <= 0;
        io_stub_1_oreg[146] <= 0;
        io_stub_1_oreg[147] <= 0;
        io_stub_1_oreg[148] <= 0;
        io_stub_1_oreg[149] <= 0;
        io_stub_1_oreg[150] <= 0;
        io_stub_1_oreg[151] <= 0;
        io_stub_1_oreg[152] <= 0;
        io_stub_1_oreg[153] <= 0;
        io_stub_1_oreg[154] <= 0;
        io_stub_1_oreg[155] <= 0;
        io_stub_1_oreg[156] <= 0;
        io_stub_1_oreg[157] <= 0;
        io_stub_1_oreg[158] <= 0;
        io_stub_1_oreg[159] <= 0;
        io_stub_1_oreg[160] <= 0;
        io_stub_1_oreg[161] <= 0;
        io_stub_1_oreg[162] <= 0;
        io_stub_1_oreg[163] <= 0;
        io_stub_1_oreg[164] <= 0;
        io_stub_1_oreg[165] <= 0;
        io_stub_1_oreg[166] <= 0;
        io_stub_1_oreg[167] <= 0;
        io_stub_1_oreg[168] <= 0;
        io_stub_1_oreg[169] <= 0;
        io_stub_1_oreg[170] <= 0;
        io_stub_1_oreg[171] <= 0;
        io_stub_1_oreg[172] <= 0;
        io_stub_1_oreg[173] <= 0;
        io_stub_1_oreg[174] <= 0;
        io_stub_1_oreg[175] <= 0;
        io_stub_1_oreg[176] <= 0;
        io_stub_1_oreg[177] <= 0;
        io_stub_1_oreg[178] <= 0;
        io_stub_1_oreg[179] <= 0;
        io_stub_1_oreg[180] <= 0;
        io_stub_1_oreg[181] <= 0;
        io_stub_1_oreg[182] <= 0;
        io_stub_1_oreg[183] <= 0;
        io_stub_1_oreg[184] <= 0;
        io_stub_1_oreg[185] <= 0;
        io_stub_1_oreg[186] <= 0;
        io_stub_1_oreg[187] <= 0;
        io_stub_1_oreg[188] <= 0;
        io_stub_1_oreg[189] <= 0;
        io_stub_1_oreg[190] <= 0;
        io_stub_1_oreg[191] <= 0;
        sdo <= 0;
        io_stub_1_irei <= 0;
    end
    else begin
        io_stub_1_irei <= sdi;
        io_stub_1_oreo <= io_stub_1_oreg[191][(1024 - 1)];
        sdo <= io_stub_1_oreo;
        for (ii=0; ii<3; ii=ii+1) begin
            tmp1 = io_stub_1_ireg[ii];
            if ((ii == 0)) begin
                io_stub_1_ireg[ii] <= {tmp1[(8 - 1)-1:0], io_stub_1_irei};
            end
            else begin
                tmp0 = io_stub_1_ireg[(ii - 1)];
                io_stub_1_ireg[ii] <= {tmp1[(8 - 1)-1:0], tmp0[(8 - 1)]};
            end
        end
        if ((io_stub_1_scnt == 196608)) begin
            valid <= 1'b1;
            io_stub_1_scnt <= 0;
            for (oo=0; oo<192; oo=oo+1) begin
                io_stub_1_oreg[oo] <= oports[oo];
            end
        end
        else begin
            valid <= 1'b0;
            io_stub_1_scnt <= (io_stub_1_scnt + 1);
            for (oo=0; oo<192; oo=oo+1) begin
                tmp2 = io_stub_1_oreg[oo];
                if ((oo == 0)) begin
                    io_stub_1_oreg[oo] <= {tmp2[(1024 - 1)-1:0], tmp2[(1024 - 1)]};
                end
                else begin
                    tmp3 = io_stub_1_oreg[(oo - 1)];
                    io_stub_1_oreg[oo] <= {tmp2[(1024 - 1)-1:0], tmp3[(1024 - 1)]};
                end
            end
        end
    end
end


always @(io_stub_1_ireg[0], io_stub_1_ireg[1], io_stub_1_ireg[2]) begin: ZYBO_IO_STUB_1_BEH_ASSIGN
    integer ii;
    for (ii=0; ii<3; ii=ii+1) begin
        iports[ii] = io_stub_1_ireg[ii];
    end
end

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_20_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_20_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_20_input_interface_data_valid) begin
            dct_2d_3_dct_1d_20_data_in_reg <= dct_2d_3_dct_1d_20_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_20_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_20_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_20_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_20_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_20_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_20_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_20_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_20_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_20_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_20_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_20_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_20_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_20_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_20_first_row_passed <= 0;
        dct_2d_3_dct_1d_20_cycles_counter <= 0;
        dct_2d_3_dct_1d_20_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_20_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_20_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_20_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_20_first_row_passed))) begin
                dct_2d_3_dct_1d_20_cycles_counter <= 0;
                dct_2d_3_dct_1d_20_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_20_cycles_counter <= (dct_2d_3_dct_1d_20_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_20_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_20_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_20_inputs_counter <= (dct_2d_3_dct_1d_20_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_20_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_20_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_20_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_20_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_20_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_20_mult_reg[i] <= (dct_2d_3_dct_1d_20_data_in_reg * dct_2d_3_dct_1d_20_coeffs[i]);
                dct_2d_3_dct_1d_20_adder_reg[i] <= (dct_2d_3_dct_1d_20_mux_flush[i] + dct_2d_3_dct_1d_20_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_20_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_20_coeffs[0] <= 0;
        dct_2d_3_dct_1d_20_coeffs[1] <= 0;
        dct_2d_3_dct_1d_20_coeffs[2] <= 0;
        dct_2d_3_dct_1d_20_coeffs[3] <= 0;
        dct_2d_3_dct_1d_20_coeffs[4] <= 0;
        dct_2d_3_dct_1d_20_coeffs[5] <= 0;
        dct_2d_3_dct_1d_20_coeffs[6] <= 0;
        dct_2d_3_dct_1d_20_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_20_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_20_inputs_counter))
                    0: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_20_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_20_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_20_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_20_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_20_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_20_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_20_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_20_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_20_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_20_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_20_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_20_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_20_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_20_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_20_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_20_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_20_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_20_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_20_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_20_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_20_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_20_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_20_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_20_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_20_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_20_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_20_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_20_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_20_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_20_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_20_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_20_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_20_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_20_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_20_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_20_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_20_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_20_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_20_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_20_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_20_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_20_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_20_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_20_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_20_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_20_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_20_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_20_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_20_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_20_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_20_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_20_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_20_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_20_first_row_passed, dct_2d_3_dct_1d_20_cycles_counter, dct_2d_3_dct_1d_20_adder_reg[0], dct_2d_3_dct_1d_20_adder_reg[1], dct_2d_3_dct_1d_20_adder_reg[2], dct_2d_3_dct_1d_20_adder_reg[3], dct_2d_3_dct_1d_20_adder_reg[4], dct_2d_3_dct_1d_20_adder_reg[5], dct_2d_3_dct_1d_20_adder_reg[6], dct_2d_3_dct_1d_20_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_20_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_20_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_20_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_20_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_20_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_20_mux_flush[i] = dct_2d_3_dct_1d_20_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_20_assign_array_20_assign_315_a = dct_2d_3_dct_1d_20_output_sigs[0];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_316_a = dct_2d_3_dct_1d_20_output_sigs[1];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_317_a = dct_2d_3_dct_1d_20_output_sigs[2];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_318_a = dct_2d_3_dct_1d_20_output_sigs[3];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_319_a = dct_2d_3_dct_1d_20_output_sigs[4];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_320_a = dct_2d_3_dct_1d_20_output_sigs[5];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_321_a = dct_2d_3_dct_1d_20_output_sigs[6];



assign dct_2d_3_dct_1d_20_assign_array_20_assign_322_a = dct_2d_3_dct_1d_20_output_sigs[7];



assign dct_2d_3_dct_1d_20_input_interface_data_in = dct_2d_3_assign_323_b;



assign dct_2d_3_dct_1d_20_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[0] = dct_2d_3_dct_1d_20_assign_array_20_assign_315_a;



assign crf_out_sigs[8] = dct_2d_3_dct_1d_20_assign_array_20_assign_316_a;



assign crf_out_sigs[16] = dct_2d_3_dct_1d_20_assign_array_20_assign_317_a;



assign crf_out_sigs[24] = dct_2d_3_dct_1d_20_assign_array_20_assign_318_a;



assign crf_out_sigs[32] = dct_2d_3_dct_1d_20_assign_array_20_assign_319_a;



assign crf_out_sigs[40] = dct_2d_3_dct_1d_20_assign_array_20_assign_320_a;



assign crf_out_sigs[48] = dct_2d_3_dct_1d_20_assign_array_20_assign_321_a;



assign crf_out_sigs[56] = dct_2d_3_dct_1d_20_assign_array_20_assign_322_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_21_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_21_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_21_input_interface_data_valid) begin
            dct_2d_3_dct_1d_21_data_in_reg <= dct_2d_3_dct_1d_21_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_21_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_21_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_21_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_21_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_21_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_21_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_21_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_21_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_21_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_21_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_21_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_21_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_21_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_21_first_row_passed <= 0;
        dct_2d_3_dct_1d_21_cycles_counter <= 0;
        dct_2d_3_dct_1d_21_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_21_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_21_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_21_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_21_first_row_passed))) begin
                dct_2d_3_dct_1d_21_cycles_counter <= 0;
                dct_2d_3_dct_1d_21_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_21_cycles_counter <= (dct_2d_3_dct_1d_21_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_21_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_21_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_21_inputs_counter <= (dct_2d_3_dct_1d_21_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_21_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_21_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_21_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_21_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_21_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_21_mult_reg[i] <= (dct_2d_3_dct_1d_21_data_in_reg * dct_2d_3_dct_1d_21_coeffs[i]);
                dct_2d_3_dct_1d_21_adder_reg[i] <= (dct_2d_3_dct_1d_21_mux_flush[i] + dct_2d_3_dct_1d_21_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_21_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_21_coeffs[0] <= 0;
        dct_2d_3_dct_1d_21_coeffs[1] <= 0;
        dct_2d_3_dct_1d_21_coeffs[2] <= 0;
        dct_2d_3_dct_1d_21_coeffs[3] <= 0;
        dct_2d_3_dct_1d_21_coeffs[4] <= 0;
        dct_2d_3_dct_1d_21_coeffs[5] <= 0;
        dct_2d_3_dct_1d_21_coeffs[6] <= 0;
        dct_2d_3_dct_1d_21_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_21_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_21_inputs_counter))
                    0: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_21_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_21_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_21_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_21_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_21_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_21_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_21_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_21_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_21_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_21_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_21_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_21_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_21_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_21_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_21_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_21_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_21_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_21_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_21_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_21_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_21_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_21_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_21_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_21_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_21_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_21_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_21_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_21_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_21_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_21_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_21_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_21_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_21_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_21_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_21_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_21_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_21_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_21_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_21_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_21_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_21_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_21_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_21_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_21_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_21_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_21_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_21_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_21_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_21_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_21_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_21_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_21_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_21_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_21_first_row_passed, dct_2d_3_dct_1d_21_cycles_counter, dct_2d_3_dct_1d_21_adder_reg[0], dct_2d_3_dct_1d_21_adder_reg[1], dct_2d_3_dct_1d_21_adder_reg[2], dct_2d_3_dct_1d_21_adder_reg[3], dct_2d_3_dct_1d_21_adder_reg[4], dct_2d_3_dct_1d_21_adder_reg[5], dct_2d_3_dct_1d_21_adder_reg[6], dct_2d_3_dct_1d_21_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_21_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_21_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_21_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_21_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_21_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_21_mux_flush[i] = dct_2d_3_dct_1d_21_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_21_assign_array_21_assign_333_a = dct_2d_3_dct_1d_21_output_sigs[0];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_334_a = dct_2d_3_dct_1d_21_output_sigs[1];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_335_a = dct_2d_3_dct_1d_21_output_sigs[2];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_336_a = dct_2d_3_dct_1d_21_output_sigs[3];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_337_a = dct_2d_3_dct_1d_21_output_sigs[4];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_338_a = dct_2d_3_dct_1d_21_output_sigs[5];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_339_a = dct_2d_3_dct_1d_21_output_sigs[6];



assign dct_2d_3_dct_1d_21_assign_array_21_assign_340_a = dct_2d_3_dct_1d_21_output_sigs[7];



assign dct_2d_3_dct_1d_21_input_interface_data_in = dct_2d_3_assign_341_b;



assign dct_2d_3_dct_1d_21_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[1] = dct_2d_3_dct_1d_21_assign_array_21_assign_333_a;



assign crf_out_sigs[9] = dct_2d_3_dct_1d_21_assign_array_21_assign_334_a;



assign crf_out_sigs[17] = dct_2d_3_dct_1d_21_assign_array_21_assign_335_a;



assign crf_out_sigs[25] = dct_2d_3_dct_1d_21_assign_array_21_assign_336_a;



assign crf_out_sigs[33] = dct_2d_3_dct_1d_21_assign_array_21_assign_337_a;



assign crf_out_sigs[41] = dct_2d_3_dct_1d_21_assign_array_21_assign_338_a;



assign crf_out_sigs[49] = dct_2d_3_dct_1d_21_assign_array_21_assign_339_a;



assign crf_out_sigs[57] = dct_2d_3_dct_1d_21_assign_array_21_assign_340_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_22_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_22_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_22_input_interface_data_valid) begin
            dct_2d_3_dct_1d_22_data_in_reg <= dct_2d_3_dct_1d_22_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_22_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_22_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_22_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_22_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_22_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_22_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_22_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_22_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_22_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_22_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_22_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_22_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_22_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_22_first_row_passed <= 0;
        dct_2d_3_dct_1d_22_cycles_counter <= 0;
        dct_2d_3_dct_1d_22_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_22_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_22_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_22_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_22_first_row_passed))) begin
                dct_2d_3_dct_1d_22_cycles_counter <= 0;
                dct_2d_3_dct_1d_22_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_22_cycles_counter <= (dct_2d_3_dct_1d_22_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_22_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_22_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_22_inputs_counter <= (dct_2d_3_dct_1d_22_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_22_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_22_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_22_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_22_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_22_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_22_mult_reg[i] <= (dct_2d_3_dct_1d_22_data_in_reg * dct_2d_3_dct_1d_22_coeffs[i]);
                dct_2d_3_dct_1d_22_adder_reg[i] <= (dct_2d_3_dct_1d_22_mux_flush[i] + dct_2d_3_dct_1d_22_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_22_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_22_coeffs[0] <= 0;
        dct_2d_3_dct_1d_22_coeffs[1] <= 0;
        dct_2d_3_dct_1d_22_coeffs[2] <= 0;
        dct_2d_3_dct_1d_22_coeffs[3] <= 0;
        dct_2d_3_dct_1d_22_coeffs[4] <= 0;
        dct_2d_3_dct_1d_22_coeffs[5] <= 0;
        dct_2d_3_dct_1d_22_coeffs[6] <= 0;
        dct_2d_3_dct_1d_22_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_22_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_22_inputs_counter))
                    0: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_22_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_22_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_22_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_22_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_22_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_22_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_22_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_22_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_22_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_22_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_22_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_22_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_22_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_22_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_22_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_22_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_22_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_22_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_22_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_22_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_22_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_22_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_22_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_22_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_22_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_22_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_22_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_22_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_22_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_22_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_22_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_22_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_22_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_22_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_22_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_22_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_22_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_22_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_22_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_22_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_22_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_22_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_22_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_22_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_22_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_22_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_22_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_22_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_22_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_22_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_22_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_22_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_22_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_22_first_row_passed, dct_2d_3_dct_1d_22_cycles_counter, dct_2d_3_dct_1d_22_adder_reg[0], dct_2d_3_dct_1d_22_adder_reg[1], dct_2d_3_dct_1d_22_adder_reg[2], dct_2d_3_dct_1d_22_adder_reg[3], dct_2d_3_dct_1d_22_adder_reg[4], dct_2d_3_dct_1d_22_adder_reg[5], dct_2d_3_dct_1d_22_adder_reg[6], dct_2d_3_dct_1d_22_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_22_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_22_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_22_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_22_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_22_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_22_mux_flush[i] = dct_2d_3_dct_1d_22_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_22_assign_array_22_assign_351_a = dct_2d_3_dct_1d_22_output_sigs[0];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_352_a = dct_2d_3_dct_1d_22_output_sigs[1];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_353_a = dct_2d_3_dct_1d_22_output_sigs[2];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_354_a = dct_2d_3_dct_1d_22_output_sigs[3];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_355_a = dct_2d_3_dct_1d_22_output_sigs[4];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_356_a = dct_2d_3_dct_1d_22_output_sigs[5];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_357_a = dct_2d_3_dct_1d_22_output_sigs[6];



assign dct_2d_3_dct_1d_22_assign_array_22_assign_358_a = dct_2d_3_dct_1d_22_output_sigs[7];



assign dct_2d_3_dct_1d_22_input_interface_data_in = dct_2d_3_assign_359_b;



assign dct_2d_3_dct_1d_22_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[2] = dct_2d_3_dct_1d_22_assign_array_22_assign_351_a;



assign crf_out_sigs[10] = dct_2d_3_dct_1d_22_assign_array_22_assign_352_a;



assign crf_out_sigs[18] = dct_2d_3_dct_1d_22_assign_array_22_assign_353_a;



assign crf_out_sigs[26] = dct_2d_3_dct_1d_22_assign_array_22_assign_354_a;



assign crf_out_sigs[34] = dct_2d_3_dct_1d_22_assign_array_22_assign_355_a;



assign crf_out_sigs[42] = dct_2d_3_dct_1d_22_assign_array_22_assign_356_a;



assign crf_out_sigs[50] = dct_2d_3_dct_1d_22_assign_array_22_assign_357_a;



assign crf_out_sigs[58] = dct_2d_3_dct_1d_22_assign_array_22_assign_358_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_23_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_23_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_23_input_interface_data_valid) begin
            dct_2d_3_dct_1d_23_data_in_reg <= dct_2d_3_dct_1d_23_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_23_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_23_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_23_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_23_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_23_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_23_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_23_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_23_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_23_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_23_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_23_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_23_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_23_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_23_first_row_passed <= 0;
        dct_2d_3_dct_1d_23_cycles_counter <= 0;
        dct_2d_3_dct_1d_23_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_23_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_23_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_23_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_23_first_row_passed))) begin
                dct_2d_3_dct_1d_23_cycles_counter <= 0;
                dct_2d_3_dct_1d_23_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_23_cycles_counter <= (dct_2d_3_dct_1d_23_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_23_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_23_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_23_inputs_counter <= (dct_2d_3_dct_1d_23_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_23_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_23_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_23_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_23_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_23_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_23_mult_reg[i] <= (dct_2d_3_dct_1d_23_data_in_reg * dct_2d_3_dct_1d_23_coeffs[i]);
                dct_2d_3_dct_1d_23_adder_reg[i] <= (dct_2d_3_dct_1d_23_mux_flush[i] + dct_2d_3_dct_1d_23_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_23_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_23_coeffs[0] <= 0;
        dct_2d_3_dct_1d_23_coeffs[1] <= 0;
        dct_2d_3_dct_1d_23_coeffs[2] <= 0;
        dct_2d_3_dct_1d_23_coeffs[3] <= 0;
        dct_2d_3_dct_1d_23_coeffs[4] <= 0;
        dct_2d_3_dct_1d_23_coeffs[5] <= 0;
        dct_2d_3_dct_1d_23_coeffs[6] <= 0;
        dct_2d_3_dct_1d_23_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_23_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_23_inputs_counter))
                    0: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_23_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_23_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_23_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_23_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_23_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_23_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_23_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_23_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_23_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_23_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_23_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_23_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_23_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_23_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_23_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_23_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_23_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_23_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_23_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_23_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_23_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_23_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_23_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_23_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_23_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_23_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_23_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_23_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_23_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_23_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_23_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_23_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_23_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_23_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_23_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_23_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_23_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_23_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_23_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_23_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_23_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_23_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_23_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_23_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_23_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_23_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_23_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_23_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_23_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_23_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_23_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_23_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_23_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_23_first_row_passed, dct_2d_3_dct_1d_23_cycles_counter, dct_2d_3_dct_1d_23_adder_reg[0], dct_2d_3_dct_1d_23_adder_reg[1], dct_2d_3_dct_1d_23_adder_reg[2], dct_2d_3_dct_1d_23_adder_reg[3], dct_2d_3_dct_1d_23_adder_reg[4], dct_2d_3_dct_1d_23_adder_reg[5], dct_2d_3_dct_1d_23_adder_reg[6], dct_2d_3_dct_1d_23_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_23_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_23_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_23_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_23_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_23_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_23_mux_flush[i] = dct_2d_3_dct_1d_23_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_23_assign_array_23_assign_369_a = dct_2d_3_dct_1d_23_output_sigs[0];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_370_a = dct_2d_3_dct_1d_23_output_sigs[1];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_371_a = dct_2d_3_dct_1d_23_output_sigs[2];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_372_a = dct_2d_3_dct_1d_23_output_sigs[3];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_373_a = dct_2d_3_dct_1d_23_output_sigs[4];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_374_a = dct_2d_3_dct_1d_23_output_sigs[5];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_375_a = dct_2d_3_dct_1d_23_output_sigs[6];



assign dct_2d_3_dct_1d_23_assign_array_23_assign_376_a = dct_2d_3_dct_1d_23_output_sigs[7];



assign dct_2d_3_dct_1d_23_input_interface_data_in = dct_2d_3_assign_377_b;



assign dct_2d_3_dct_1d_23_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[3] = dct_2d_3_dct_1d_23_assign_array_23_assign_369_a;



assign crf_out_sigs[11] = dct_2d_3_dct_1d_23_assign_array_23_assign_370_a;



assign crf_out_sigs[19] = dct_2d_3_dct_1d_23_assign_array_23_assign_371_a;



assign crf_out_sigs[27] = dct_2d_3_dct_1d_23_assign_array_23_assign_372_a;



assign crf_out_sigs[35] = dct_2d_3_dct_1d_23_assign_array_23_assign_373_a;



assign crf_out_sigs[43] = dct_2d_3_dct_1d_23_assign_array_23_assign_374_a;



assign crf_out_sigs[51] = dct_2d_3_dct_1d_23_assign_array_23_assign_375_a;



assign crf_out_sigs[59] = dct_2d_3_dct_1d_23_assign_array_23_assign_376_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_24_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_24_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_24_input_interface_data_valid) begin
            dct_2d_3_dct_1d_24_data_in_reg <= dct_2d_3_dct_1d_24_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_24_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_24_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_24_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_24_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_24_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_24_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_24_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_24_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_24_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_24_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_24_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_24_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_24_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_24_first_row_passed <= 0;
        dct_2d_3_dct_1d_24_cycles_counter <= 0;
        dct_2d_3_dct_1d_24_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_24_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_24_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_24_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_24_first_row_passed))) begin
                dct_2d_3_dct_1d_24_cycles_counter <= 0;
                dct_2d_3_dct_1d_24_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_24_cycles_counter <= (dct_2d_3_dct_1d_24_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_24_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_24_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_24_inputs_counter <= (dct_2d_3_dct_1d_24_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_24_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_24_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_24_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_24_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_24_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_24_mult_reg[i] <= (dct_2d_3_dct_1d_24_data_in_reg * dct_2d_3_dct_1d_24_coeffs[i]);
                dct_2d_3_dct_1d_24_adder_reg[i] <= (dct_2d_3_dct_1d_24_mux_flush[i] + dct_2d_3_dct_1d_24_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_24_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_24_coeffs[0] <= 0;
        dct_2d_3_dct_1d_24_coeffs[1] <= 0;
        dct_2d_3_dct_1d_24_coeffs[2] <= 0;
        dct_2d_3_dct_1d_24_coeffs[3] <= 0;
        dct_2d_3_dct_1d_24_coeffs[4] <= 0;
        dct_2d_3_dct_1d_24_coeffs[5] <= 0;
        dct_2d_3_dct_1d_24_coeffs[6] <= 0;
        dct_2d_3_dct_1d_24_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_24_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_24_inputs_counter))
                    0: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_24_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_24_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_24_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_24_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_24_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_24_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_24_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_24_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_24_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_24_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_24_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_24_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_24_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_24_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_24_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_24_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_24_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_24_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_24_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_24_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_24_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_24_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_24_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_24_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_24_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_24_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_24_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_24_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_24_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_24_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_24_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_24_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_24_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_24_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_24_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_24_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_24_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_24_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_24_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_24_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_24_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_24_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_24_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_24_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_24_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_24_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_24_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_24_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_24_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_24_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_24_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_24_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_24_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_24_first_row_passed, dct_2d_3_dct_1d_24_cycles_counter, dct_2d_3_dct_1d_24_adder_reg[0], dct_2d_3_dct_1d_24_adder_reg[1], dct_2d_3_dct_1d_24_adder_reg[2], dct_2d_3_dct_1d_24_adder_reg[3], dct_2d_3_dct_1d_24_adder_reg[4], dct_2d_3_dct_1d_24_adder_reg[5], dct_2d_3_dct_1d_24_adder_reg[6], dct_2d_3_dct_1d_24_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_24_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_24_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_24_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_24_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_24_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_24_mux_flush[i] = dct_2d_3_dct_1d_24_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_24_assign_array_24_assign_387_a = dct_2d_3_dct_1d_24_output_sigs[0];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_388_a = dct_2d_3_dct_1d_24_output_sigs[1];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_389_a = dct_2d_3_dct_1d_24_output_sigs[2];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_390_a = dct_2d_3_dct_1d_24_output_sigs[3];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_391_a = dct_2d_3_dct_1d_24_output_sigs[4];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_392_a = dct_2d_3_dct_1d_24_output_sigs[5];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_393_a = dct_2d_3_dct_1d_24_output_sigs[6];



assign dct_2d_3_dct_1d_24_assign_array_24_assign_394_a = dct_2d_3_dct_1d_24_output_sigs[7];



assign dct_2d_3_dct_1d_24_input_interface_data_in = dct_2d_3_assign_395_b;



assign dct_2d_3_dct_1d_24_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[4] = dct_2d_3_dct_1d_24_assign_array_24_assign_387_a;



assign crf_out_sigs[12] = dct_2d_3_dct_1d_24_assign_array_24_assign_388_a;



assign crf_out_sigs[20] = dct_2d_3_dct_1d_24_assign_array_24_assign_389_a;



assign crf_out_sigs[28] = dct_2d_3_dct_1d_24_assign_array_24_assign_390_a;



assign crf_out_sigs[36] = dct_2d_3_dct_1d_24_assign_array_24_assign_391_a;



assign crf_out_sigs[44] = dct_2d_3_dct_1d_24_assign_array_24_assign_392_a;



assign crf_out_sigs[52] = dct_2d_3_dct_1d_24_assign_array_24_assign_393_a;



assign crf_out_sigs[60] = dct_2d_3_dct_1d_24_assign_array_24_assign_394_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_25_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_25_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_25_input_interface_data_valid) begin
            dct_2d_3_dct_1d_25_data_in_reg <= dct_2d_3_dct_1d_25_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_25_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_25_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_25_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_25_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_25_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_25_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_25_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_25_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_25_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_25_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_25_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_25_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_25_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_25_first_row_passed <= 0;
        dct_2d_3_dct_1d_25_cycles_counter <= 0;
        dct_2d_3_dct_1d_25_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_25_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_25_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_25_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_25_first_row_passed))) begin
                dct_2d_3_dct_1d_25_cycles_counter <= 0;
                dct_2d_3_dct_1d_25_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_25_cycles_counter <= (dct_2d_3_dct_1d_25_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_25_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_25_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_25_inputs_counter <= (dct_2d_3_dct_1d_25_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_25_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_25_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_25_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_25_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_25_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_25_mult_reg[i] <= (dct_2d_3_dct_1d_25_data_in_reg * dct_2d_3_dct_1d_25_coeffs[i]);
                dct_2d_3_dct_1d_25_adder_reg[i] <= (dct_2d_3_dct_1d_25_mux_flush[i] + dct_2d_3_dct_1d_25_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_25_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_25_coeffs[0] <= 0;
        dct_2d_3_dct_1d_25_coeffs[1] <= 0;
        dct_2d_3_dct_1d_25_coeffs[2] <= 0;
        dct_2d_3_dct_1d_25_coeffs[3] <= 0;
        dct_2d_3_dct_1d_25_coeffs[4] <= 0;
        dct_2d_3_dct_1d_25_coeffs[5] <= 0;
        dct_2d_3_dct_1d_25_coeffs[6] <= 0;
        dct_2d_3_dct_1d_25_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_25_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_25_inputs_counter))
                    0: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_25_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_25_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_25_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_25_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_25_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_25_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_25_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_25_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_25_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_25_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_25_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_25_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_25_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_25_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_25_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_25_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_25_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_25_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_25_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_25_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_25_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_25_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_25_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_25_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_25_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_25_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_25_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_25_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_25_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_25_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_25_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_25_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_25_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_25_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_25_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_25_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_25_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_25_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_25_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_25_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_25_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_25_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_25_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_25_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_25_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_25_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_25_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_25_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_25_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_25_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_25_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_25_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_25_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_25_first_row_passed, dct_2d_3_dct_1d_25_cycles_counter, dct_2d_3_dct_1d_25_adder_reg[0], dct_2d_3_dct_1d_25_adder_reg[1], dct_2d_3_dct_1d_25_adder_reg[2], dct_2d_3_dct_1d_25_adder_reg[3], dct_2d_3_dct_1d_25_adder_reg[4], dct_2d_3_dct_1d_25_adder_reg[5], dct_2d_3_dct_1d_25_adder_reg[6], dct_2d_3_dct_1d_25_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_25_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_25_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_25_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_25_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_25_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_25_mux_flush[i] = dct_2d_3_dct_1d_25_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_25_assign_array_25_assign_405_a = dct_2d_3_dct_1d_25_output_sigs[0];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_406_a = dct_2d_3_dct_1d_25_output_sigs[1];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_407_a = dct_2d_3_dct_1d_25_output_sigs[2];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_408_a = dct_2d_3_dct_1d_25_output_sigs[3];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_409_a = dct_2d_3_dct_1d_25_output_sigs[4];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_410_a = dct_2d_3_dct_1d_25_output_sigs[5];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_411_a = dct_2d_3_dct_1d_25_output_sigs[6];



assign dct_2d_3_dct_1d_25_assign_array_25_assign_412_a = dct_2d_3_dct_1d_25_output_sigs[7];



assign dct_2d_3_dct_1d_25_input_interface_data_in = dct_2d_3_assign_413_b;



assign dct_2d_3_dct_1d_25_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[5] = dct_2d_3_dct_1d_25_assign_array_25_assign_405_a;



assign crf_out_sigs[13] = dct_2d_3_dct_1d_25_assign_array_25_assign_406_a;



assign crf_out_sigs[21] = dct_2d_3_dct_1d_25_assign_array_25_assign_407_a;



assign crf_out_sigs[29] = dct_2d_3_dct_1d_25_assign_array_25_assign_408_a;



assign crf_out_sigs[37] = dct_2d_3_dct_1d_25_assign_array_25_assign_409_a;



assign crf_out_sigs[45] = dct_2d_3_dct_1d_25_assign_array_25_assign_410_a;



assign crf_out_sigs[53] = dct_2d_3_dct_1d_25_assign_array_25_assign_411_a;



assign crf_out_sigs[61] = dct_2d_3_dct_1d_25_assign_array_25_assign_412_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_26_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_26_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_26_input_interface_data_valid) begin
            dct_2d_3_dct_1d_26_data_in_reg <= dct_2d_3_dct_1d_26_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_26_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_26_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_26_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_26_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_26_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_26_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_26_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_26_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_26_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_26_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_26_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_26_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_26_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_26_first_row_passed <= 0;
        dct_2d_3_dct_1d_26_cycles_counter <= 0;
        dct_2d_3_dct_1d_26_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_26_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_26_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_26_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_26_first_row_passed))) begin
                dct_2d_3_dct_1d_26_cycles_counter <= 0;
                dct_2d_3_dct_1d_26_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_26_cycles_counter <= (dct_2d_3_dct_1d_26_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_26_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_26_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_26_inputs_counter <= (dct_2d_3_dct_1d_26_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_26_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_26_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_26_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_26_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_26_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_26_mult_reg[i] <= (dct_2d_3_dct_1d_26_data_in_reg * dct_2d_3_dct_1d_26_coeffs[i]);
                dct_2d_3_dct_1d_26_adder_reg[i] <= (dct_2d_3_dct_1d_26_mux_flush[i] + dct_2d_3_dct_1d_26_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_26_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_26_coeffs[0] <= 0;
        dct_2d_3_dct_1d_26_coeffs[1] <= 0;
        dct_2d_3_dct_1d_26_coeffs[2] <= 0;
        dct_2d_3_dct_1d_26_coeffs[3] <= 0;
        dct_2d_3_dct_1d_26_coeffs[4] <= 0;
        dct_2d_3_dct_1d_26_coeffs[5] <= 0;
        dct_2d_3_dct_1d_26_coeffs[6] <= 0;
        dct_2d_3_dct_1d_26_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_26_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_26_inputs_counter))
                    0: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_26_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_26_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_26_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_26_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_26_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_26_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_26_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_26_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_26_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_26_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_26_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_26_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_26_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_26_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_26_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_26_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_26_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_26_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_26_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_26_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_26_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_26_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_26_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_26_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_26_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_26_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_26_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_26_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_26_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_26_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_26_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_26_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_26_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_26_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_26_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_26_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_26_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_26_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_26_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_26_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_26_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_26_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_26_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_26_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_26_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_26_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_26_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_26_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_26_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_26_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_26_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_26_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_26_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_26_first_row_passed, dct_2d_3_dct_1d_26_cycles_counter, dct_2d_3_dct_1d_26_adder_reg[0], dct_2d_3_dct_1d_26_adder_reg[1], dct_2d_3_dct_1d_26_adder_reg[2], dct_2d_3_dct_1d_26_adder_reg[3], dct_2d_3_dct_1d_26_adder_reg[4], dct_2d_3_dct_1d_26_adder_reg[5], dct_2d_3_dct_1d_26_adder_reg[6], dct_2d_3_dct_1d_26_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_26_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_26_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_26_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_26_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_26_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_26_mux_flush[i] = dct_2d_3_dct_1d_26_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_26_assign_array_26_assign_423_a = dct_2d_3_dct_1d_26_output_sigs[0];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_424_a = dct_2d_3_dct_1d_26_output_sigs[1];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_425_a = dct_2d_3_dct_1d_26_output_sigs[2];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_426_a = dct_2d_3_dct_1d_26_output_sigs[3];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_427_a = dct_2d_3_dct_1d_26_output_sigs[4];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_428_a = dct_2d_3_dct_1d_26_output_sigs[5];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_429_a = dct_2d_3_dct_1d_26_output_sigs[6];



assign dct_2d_3_dct_1d_26_assign_array_26_assign_430_a = dct_2d_3_dct_1d_26_output_sigs[7];



assign dct_2d_3_dct_1d_26_input_interface_data_in = dct_2d_3_assign_431_b;



assign dct_2d_3_dct_1d_26_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[6] = dct_2d_3_dct_1d_26_assign_array_26_assign_423_a;



assign crf_out_sigs[14] = dct_2d_3_dct_1d_26_assign_array_26_assign_424_a;



assign crf_out_sigs[22] = dct_2d_3_dct_1d_26_assign_array_26_assign_425_a;



assign crf_out_sigs[30] = dct_2d_3_dct_1d_26_assign_array_26_assign_426_a;



assign crf_out_sigs[38] = dct_2d_3_dct_1d_26_assign_array_26_assign_427_a;



assign crf_out_sigs[46] = dct_2d_3_dct_1d_26_assign_array_26_assign_428_a;



assign crf_out_sigs[54] = dct_2d_3_dct_1d_26_assign_array_26_assign_429_a;



assign crf_out_sigs[62] = dct_2d_3_dct_1d_26_assign_array_26_assign_430_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_27_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_27_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_27_input_interface_data_valid) begin
            dct_2d_3_dct_1d_27_data_in_reg <= dct_2d_3_dct_1d_27_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_27_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_27_output_interface_data_valid <= 0;
        dct_2d_3_dct_1d_27_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_27_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_27_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_27_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_27_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_27_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_27_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_27_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_dct_1d_27_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_3_dct_1d_27_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_27_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_27_first_row_passed <= 0;
        dct_2d_3_dct_1d_27_cycles_counter <= 0;
        dct_2d_3_dct_1d_27_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_27_input_interface_data_valid) begin
            if (((dct_2d_3_dct_1d_27_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_27_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_27_first_row_passed))) begin
                dct_2d_3_dct_1d_27_cycles_counter <= 0;
                dct_2d_3_dct_1d_27_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_27_cycles_counter <= (dct_2d_3_dct_1d_27_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_27_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_27_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_27_inputs_counter <= (dct_2d_3_dct_1d_27_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_27_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_27_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_27_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_27_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_27_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_27_mult_reg[i] <= (dct_2d_3_dct_1d_27_data_in_reg * dct_2d_3_dct_1d_27_coeffs[i]);
                dct_2d_3_dct_1d_27_adder_reg[i] <= (dct_2d_3_dct_1d_27_mux_flush[i] + dct_2d_3_dct_1d_27_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_27_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_27_coeffs[0] <= 0;
        dct_2d_3_dct_1d_27_coeffs[1] <= 0;
        dct_2d_3_dct_1d_27_coeffs[2] <= 0;
        dct_2d_3_dct_1d_27_coeffs[3] <= 0;
        dct_2d_3_dct_1d_27_coeffs[4] <= 0;
        dct_2d_3_dct_1d_27_coeffs[5] <= 0;
        dct_2d_3_dct_1d_27_coeffs[6] <= 0;
        dct_2d_3_dct_1d_27_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_dct_1d_27_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_27_inputs_counter))
                    0: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_27_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_27_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_27_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_27_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_27_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_27_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_27_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_27_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_27_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_27_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_27_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_27_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_27_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_27_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_27_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_27_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_27_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_27_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_27_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_27_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_27_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_27_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_27_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_27_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_27_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_27_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_27_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_27_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_27_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_27_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_27_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_27_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_27_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_27_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_27_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_27_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_27_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_27_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_27_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_27_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_27_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_27_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_27_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_27_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_27_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_27_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_27_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_27_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_27_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_27_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_27_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_27_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_27_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_27_first_row_passed, dct_2d_3_dct_1d_27_cycles_counter, dct_2d_3_dct_1d_27_adder_reg[0], dct_2d_3_dct_1d_27_adder_reg[1], dct_2d_3_dct_1d_27_adder_reg[2], dct_2d_3_dct_1d_27_adder_reg[3], dct_2d_3_dct_1d_27_adder_reg[4], dct_2d_3_dct_1d_27_adder_reg[5], dct_2d_3_dct_1d_27_adder_reg[6], dct_2d_3_dct_1d_27_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_27_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_27_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_27_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_27_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_27_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_27_mux_flush[i] = dct_2d_3_dct_1d_27_adder_reg[i];
        end
    end
end



assign dct_2d_3_dct_1d_27_assign_array_27_assign_441_a = dct_2d_3_dct_1d_27_output_sigs[0];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_442_a = dct_2d_3_dct_1d_27_output_sigs[1];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_443_a = dct_2d_3_dct_1d_27_output_sigs[2];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_444_a = dct_2d_3_dct_1d_27_output_sigs[3];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_445_a = dct_2d_3_dct_1d_27_output_sigs[4];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_446_a = dct_2d_3_dct_1d_27_output_sigs[5];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_447_a = dct_2d_3_dct_1d_27_output_sigs[6];



assign dct_2d_3_dct_1d_27_assign_array_27_assign_448_a = dct_2d_3_dct_1d_27_output_sigs[7];



assign dct_2d_3_dct_1d_27_input_interface_data_in = dct_2d_3_assign_449_b;



assign dct_2d_3_dct_1d_27_input_interface_data_valid = dct_2d_3_assign_324_b;



assign crf_out_sigs[7] = dct_2d_3_dct_1d_27_assign_array_27_assign_441_a;



assign crf_out_sigs[15] = dct_2d_3_dct_1d_27_assign_array_27_assign_442_a;



assign crf_out_sigs[23] = dct_2d_3_dct_1d_27_assign_array_27_assign_443_a;



assign crf_out_sigs[31] = dct_2d_3_dct_1d_27_assign_array_27_assign_444_a;



assign crf_out_sigs[39] = dct_2d_3_dct_1d_27_assign_array_27_assign_445_a;



assign crf_out_sigs[47] = dct_2d_3_dct_1d_27_assign_array_27_assign_446_a;



assign crf_out_sigs[55] = dct_2d_3_dct_1d_27_assign_array_27_assign_447_a;



assign crf_out_sigs[63] = dct_2d_3_dct_1d_27_assign_array_27_assign_448_a;



assign dct_2d_3_outputs_data_valid = dct_2d_3_dct_1d_20_output_interface_data_valid;

// Align to zero each input
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_INPUT_SUBTRACT
    if (reset == 0) begin
        dct_2d_3_input_1d_stage_1_data_in <= 0;
        dct_2d_3_data_valid_reg <= 0;
        dct_2d_3_input_1d_stage_1_data_valid <= 0;
        dct_2d_3_data_in_signed <= 0;
    end
    else begin
        if (cr_data_valid) begin
            dct_2d_3_data_in_signed <= cr_data_in;
            dct_2d_3_input_1d_stage_1_data_in <= (dct_2d_3_data_in_signed - 128);
            dct_2d_3_data_valid_reg <= cr_data_valid;
            dct_2d_3_input_1d_stage_1_data_valid <= dct_2d_3_data_valid_reg;
        end
    end
end



assign crf_data_valid = dct_2d_3_data_valid_reg2;

// Counter update
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_COUNTER_UPDATE
    if (reset == 0) begin
        dct_2d_3_counter <= 0;
    end
    else begin
        if (dct_2d_3_outputs_data_valid) begin
            if (($signed({1'b0, dct_2d_3_counter}) == (8 - 1))) begin
                dct_2d_3_counter <= 0;
            end
            else begin
                dct_2d_3_counter <= (dct_2d_3_counter + 1);
            end
        end
    end
end

// Data valid signal assignment when the outputs are valid
always @(dct_2d_3_outputs_data_valid, dct_2d_3_counter) begin: ZYBO_DCT_2D_3_DATA_VALID_2D
    if ((dct_2d_3_outputs_data_valid && (dct_2d_3_counter == 0))) begin
        dct_2d_3_data_valid_reg2 = 1'b1;
    end
    else begin
        dct_2d_3_data_valid_reg2 = 1'b0;
    end
end

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_19_INPUT_REG
    if (reset == 0) begin
        dct_2d_3_dct_1d_19_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_3_input_1d_stage_1_data_valid) begin
            dct_2d_3_dct_1d_19_data_in_reg <= dct_2d_3_input_1d_stage_1_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_19_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_3_assign_324_b <= 0;
        dct_2d_3_dct_1d_19_output_sigs[0] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[1] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[2] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[3] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[4] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[5] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[6] <= 0;
        dct_2d_3_dct_1d_19_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_19_output_sigs[i] <= ($signed(dct_2d_3_dct_1d_19_adder_reg[i][25-1:14]) + dct_2d_3_dct_1d_19_adder_reg[i][13]);
        end
        if (((dct_2d_3_dct_1d_19_cycles_counter == (8 + 2)) || (dct_2d_3_dct_1d_19_first_row_passed && ($signed({1'b0, dct_2d_3_dct_1d_19_cycles_counter}) == (8 - 1))))) begin
            dct_2d_3_assign_324_b <= 1'b1;
        end
        else begin
            dct_2d_3_assign_324_b <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_19_COUNTERS
    if (reset == 0) begin
        dct_2d_3_dct_1d_19_first_row_passed <= 0;
        dct_2d_3_dct_1d_19_cycles_counter <= 0;
        dct_2d_3_dct_1d_19_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_3_input_1d_stage_1_data_valid) begin
            if (((dct_2d_3_dct_1d_19_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_19_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_19_first_row_passed))) begin
                dct_2d_3_dct_1d_19_cycles_counter <= 0;
                dct_2d_3_dct_1d_19_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_3_dct_1d_19_cycles_counter <= (dct_2d_3_dct_1d_19_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_3_dct_1d_19_inputs_counter}) == (8 - 1))) begin
                dct_2d_3_dct_1d_19_inputs_counter <= 0;
            end
            else begin
                dct_2d_3_dct_1d_19_inputs_counter <= (dct_2d_3_dct_1d_19_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_19_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_19_adder_reg[0] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[1] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[2] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[3] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[4] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[5] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[6] <= 0;
        dct_2d_3_dct_1d_19_adder_reg[7] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[0] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[1] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[2] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[3] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[4] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[5] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[6] <= 0;
        dct_2d_3_dct_1d_19_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_3_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_3_dct_1d_19_mult_reg[i] <= (dct_2d_3_dct_1d_19_data_in_reg * dct_2d_3_dct_1d_19_coeffs[i]);
                dct_2d_3_dct_1d_19_adder_reg[i] <= (dct_2d_3_dct_1d_19_mux_flush[i] + dct_2d_3_dct_1d_19_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_3_DCT_1D_19_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_3_dct_1d_19_coeffs[0] <= 0;
        dct_2d_3_dct_1d_19_coeffs[1] <= 0;
        dct_2d_3_dct_1d_19_coeffs[2] <= 0;
        dct_2d_3_dct_1d_19_coeffs[3] <= 0;
        dct_2d_3_dct_1d_19_coeffs[4] <= 0;
        dct_2d_3_dct_1d_19_coeffs[5] <= 0;
        dct_2d_3_dct_1d_19_coeffs[6] <= 0;
        dct_2d_3_dct_1d_19_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_3_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_3_dct_1d_19_inputs_counter))
                    0: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    1: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    2: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    3: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    4: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    5: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    6: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    7: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    8: dct_2d_3_dct_1d_19_coeffs[i] <= 8035;
                    9: dct_2d_3_dct_1d_19_coeffs[i] <= 6811;
                    10: dct_2d_3_dct_1d_19_coeffs[i] <= 4551;
                    11: dct_2d_3_dct_1d_19_coeffs[i] <= 1598;
                    12: dct_2d_3_dct_1d_19_coeffs[i] <= (-1598);
                    13: dct_2d_3_dct_1d_19_coeffs[i] <= (-4551);
                    14: dct_2d_3_dct_1d_19_coeffs[i] <= (-6811);
                    15: dct_2d_3_dct_1d_19_coeffs[i] <= (-8035);
                    16: dct_2d_3_dct_1d_19_coeffs[i] <= 7568;
                    17: dct_2d_3_dct_1d_19_coeffs[i] <= 3135;
                    18: dct_2d_3_dct_1d_19_coeffs[i] <= (-3135);
                    19: dct_2d_3_dct_1d_19_coeffs[i] <= (-7568);
                    20: dct_2d_3_dct_1d_19_coeffs[i] <= (-7568);
                    21: dct_2d_3_dct_1d_19_coeffs[i] <= (-3135);
                    22: dct_2d_3_dct_1d_19_coeffs[i] <= 3135;
                    23: dct_2d_3_dct_1d_19_coeffs[i] <= 7568;
                    24: dct_2d_3_dct_1d_19_coeffs[i] <= 6811;
                    25: dct_2d_3_dct_1d_19_coeffs[i] <= (-1598);
                    26: dct_2d_3_dct_1d_19_coeffs[i] <= (-8035);
                    27: dct_2d_3_dct_1d_19_coeffs[i] <= (-4551);
                    28: dct_2d_3_dct_1d_19_coeffs[i] <= 4551;
                    29: dct_2d_3_dct_1d_19_coeffs[i] <= 8035;
                    30: dct_2d_3_dct_1d_19_coeffs[i] <= 1598;
                    31: dct_2d_3_dct_1d_19_coeffs[i] <= (-6811);
                    32: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    33: dct_2d_3_dct_1d_19_coeffs[i] <= (-5793);
                    34: dct_2d_3_dct_1d_19_coeffs[i] <= (-5793);
                    35: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    36: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    37: dct_2d_3_dct_1d_19_coeffs[i] <= (-5793);
                    38: dct_2d_3_dct_1d_19_coeffs[i] <= (-5793);
                    39: dct_2d_3_dct_1d_19_coeffs[i] <= 5793;
                    40: dct_2d_3_dct_1d_19_coeffs[i] <= 4551;
                    41: dct_2d_3_dct_1d_19_coeffs[i] <= (-8035);
                    42: dct_2d_3_dct_1d_19_coeffs[i] <= 1598;
                    43: dct_2d_3_dct_1d_19_coeffs[i] <= 6811;
                    44: dct_2d_3_dct_1d_19_coeffs[i] <= (-6811);
                    45: dct_2d_3_dct_1d_19_coeffs[i] <= (-1598);
                    46: dct_2d_3_dct_1d_19_coeffs[i] <= 8035;
                    47: dct_2d_3_dct_1d_19_coeffs[i] <= (-4551);
                    48: dct_2d_3_dct_1d_19_coeffs[i] <= 3135;
                    49: dct_2d_3_dct_1d_19_coeffs[i] <= (-7568);
                    50: dct_2d_3_dct_1d_19_coeffs[i] <= 7568;
                    51: dct_2d_3_dct_1d_19_coeffs[i] <= (-3135);
                    52: dct_2d_3_dct_1d_19_coeffs[i] <= (-3135);
                    53: dct_2d_3_dct_1d_19_coeffs[i] <= 7568;
                    54: dct_2d_3_dct_1d_19_coeffs[i] <= (-7568);
                    55: dct_2d_3_dct_1d_19_coeffs[i] <= 3135;
                    56: dct_2d_3_dct_1d_19_coeffs[i] <= 1598;
                    57: dct_2d_3_dct_1d_19_coeffs[i] <= (-4551);
                    58: dct_2d_3_dct_1d_19_coeffs[i] <= 6811;
                    59: dct_2d_3_dct_1d_19_coeffs[i] <= (-8035);
                    60: dct_2d_3_dct_1d_19_coeffs[i] <= 8035;
                    61: dct_2d_3_dct_1d_19_coeffs[i] <= (-6811);
                    62: dct_2d_3_dct_1d_19_coeffs[i] <= 4551;
                    default: dct_2d_3_dct_1d_19_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_3_dct_1d_19_first_row_passed, dct_2d_3_dct_1d_19_cycles_counter, dct_2d_3_dct_1d_19_adder_reg[0], dct_2d_3_dct_1d_19_adder_reg[1], dct_2d_3_dct_1d_19_adder_reg[2], dct_2d_3_dct_1d_19_adder_reg[3], dct_2d_3_dct_1d_19_adder_reg[4], dct_2d_3_dct_1d_19_adder_reg[5], dct_2d_3_dct_1d_19_adder_reg[6], dct_2d_3_dct_1d_19_adder_reg[7]) begin: ZYBO_DCT_2D_3_DCT_1D_19_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_3_dct_1d_19_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_3_dct_1d_19_cycles_counter}) == (8 - 1)) && dct_2d_3_dct_1d_19_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_19_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_3_dct_1d_19_mux_flush[i] = dct_2d_3_dct_1d_19_adder_reg[i];
        end
    end
end



assign dct_2d_3_assign_323_b = dct_2d_3_dct_1d_19_output_sigs[0];



assign dct_2d_3_assign_341_b = dct_2d_3_dct_1d_19_output_sigs[1];



assign dct_2d_3_assign_359_b = dct_2d_3_dct_1d_19_output_sigs[2];



assign dct_2d_3_assign_377_b = dct_2d_3_dct_1d_19_output_sigs[3];



assign dct_2d_3_assign_395_b = dct_2d_3_dct_1d_19_output_sigs[4];



assign dct_2d_3_assign_413_b = dct_2d_3_dct_1d_19_output_sigs[5];



assign dct_2d_3_assign_431_b = dct_2d_3_dct_1d_19_output_sigs[6];



assign dct_2d_3_assign_449_b = dct_2d_3_dct_1d_19_output_sigs[7];



assign y_data_in = iports[0];
assign y_data_valid = valid;
assign cb_data_in = iports[1];
assign cb_data_valid = valid;
assign cr_data_in = iports[2];
assign cr_data_valid = valid;


always @(posedge clock) begin: ZYBO_BEH_ASSIGN_OUTPUTS
    integer ii;
    if (yf_data_valid) begin
        for (ii=0; ii<64; ii=ii+1) begin
            oports[ii] <= yf_out_sigs[ii];
        end
    end
    if (cbf_data_valid) begin
        for (ii=0; ii<64; ii=ii+1) begin
            oports[(ii + 64)] <= cbf_out_sigs[ii];
        end
    end
    if (crf_data_valid) begin
        for (ii=0; ii<64; ii=ii+1) begin
            oports[(ii + 128)] <= crf_out_sigs[ii];
        end
    end
end

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_2_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_2_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_2_input_interface_data_valid) begin
            dct_2d_1_dct_1d_2_data_in_reg <= dct_2d_1_dct_1d_2_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_2_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_2_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_2_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_2_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_2_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_2_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_2_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_2_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_2_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_2_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_2_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_2_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_2_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_2_first_row_passed <= 0;
        dct_2d_1_dct_1d_2_cycles_counter <= 0;
        dct_2d_1_dct_1d_2_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_2_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_2_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_2_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_2_first_row_passed))) begin
                dct_2d_1_dct_1d_2_cycles_counter <= 0;
                dct_2d_1_dct_1d_2_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_2_cycles_counter <= (dct_2d_1_dct_1d_2_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_2_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_2_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_2_inputs_counter <= (dct_2d_1_dct_1d_2_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_2_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_2_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_2_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_2_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_2_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_2_mult_reg[i] <= (dct_2d_1_dct_1d_2_data_in_reg * dct_2d_1_dct_1d_2_coeffs[i]);
                dct_2d_1_dct_1d_2_adder_reg[i] <= (dct_2d_1_dct_1d_2_mux_flush[i] + dct_2d_1_dct_1d_2_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_2_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_2_coeffs[0] <= 0;
        dct_2d_1_dct_1d_2_coeffs[1] <= 0;
        dct_2d_1_dct_1d_2_coeffs[2] <= 0;
        dct_2d_1_dct_1d_2_coeffs[3] <= 0;
        dct_2d_1_dct_1d_2_coeffs[4] <= 0;
        dct_2d_1_dct_1d_2_coeffs[5] <= 0;
        dct_2d_1_dct_1d_2_coeffs[6] <= 0;
        dct_2d_1_dct_1d_2_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_2_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_2_inputs_counter))
                    0: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_2_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_2_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_2_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_2_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_2_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_2_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_2_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_2_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_2_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_2_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_2_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_2_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_2_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_2_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_2_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_2_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_2_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_2_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_2_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_2_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_2_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_2_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_2_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_2_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_2_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_2_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_2_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_2_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_2_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_2_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_2_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_2_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_2_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_2_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_2_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_2_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_2_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_2_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_2_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_2_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_2_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_2_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_2_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_2_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_2_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_2_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_2_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_2_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_2_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_2_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_2_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_2_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_2_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_2_first_row_passed, dct_2d_1_dct_1d_2_cycles_counter, dct_2d_1_dct_1d_2_adder_reg[0], dct_2d_1_dct_1d_2_adder_reg[1], dct_2d_1_dct_1d_2_adder_reg[2], dct_2d_1_dct_1d_2_adder_reg[3], dct_2d_1_dct_1d_2_adder_reg[4], dct_2d_1_dct_1d_2_adder_reg[5], dct_2d_1_dct_1d_2_adder_reg[6], dct_2d_1_dct_1d_2_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_2_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_2_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_2_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_2_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_2_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_2_mux_flush[i] = dct_2d_1_dct_1d_2_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_2_assign_array_2_assign_9_a = dct_2d_1_dct_1d_2_output_sigs[0];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_10_a = dct_2d_1_dct_1d_2_output_sigs[1];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_11_a = dct_2d_1_dct_1d_2_output_sigs[2];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_12_a = dct_2d_1_dct_1d_2_output_sigs[3];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_13_a = dct_2d_1_dct_1d_2_output_sigs[4];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_14_a = dct_2d_1_dct_1d_2_output_sigs[5];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_15_a = dct_2d_1_dct_1d_2_output_sigs[6];



assign dct_2d_1_dct_1d_2_assign_array_2_assign_16_a = dct_2d_1_dct_1d_2_output_sigs[7];



assign dct_2d_1_dct_1d_2_input_interface_data_in = dct_2d_1_assign_17_b;



assign dct_2d_1_dct_1d_2_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[0] = dct_2d_1_dct_1d_2_assign_array_2_assign_9_a;



assign yf_out_sigs[8] = dct_2d_1_dct_1d_2_assign_array_2_assign_10_a;



assign yf_out_sigs[16] = dct_2d_1_dct_1d_2_assign_array_2_assign_11_a;



assign yf_out_sigs[24] = dct_2d_1_dct_1d_2_assign_array_2_assign_12_a;



assign yf_out_sigs[32] = dct_2d_1_dct_1d_2_assign_array_2_assign_13_a;



assign yf_out_sigs[40] = dct_2d_1_dct_1d_2_assign_array_2_assign_14_a;



assign yf_out_sigs[48] = dct_2d_1_dct_1d_2_assign_array_2_assign_15_a;



assign yf_out_sigs[56] = dct_2d_1_dct_1d_2_assign_array_2_assign_16_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_3_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_3_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_3_input_interface_data_valid) begin
            dct_2d_1_dct_1d_3_data_in_reg <= dct_2d_1_dct_1d_3_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_3_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_3_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_3_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_3_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_3_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_3_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_3_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_3_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_3_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_3_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_3_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_3_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_3_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_3_first_row_passed <= 0;
        dct_2d_1_dct_1d_3_cycles_counter <= 0;
        dct_2d_1_dct_1d_3_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_3_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_3_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_3_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_3_first_row_passed))) begin
                dct_2d_1_dct_1d_3_cycles_counter <= 0;
                dct_2d_1_dct_1d_3_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_3_cycles_counter <= (dct_2d_1_dct_1d_3_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_3_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_3_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_3_inputs_counter <= (dct_2d_1_dct_1d_3_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_3_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_3_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_3_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_3_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_3_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_3_mult_reg[i] <= (dct_2d_1_dct_1d_3_data_in_reg * dct_2d_1_dct_1d_3_coeffs[i]);
                dct_2d_1_dct_1d_3_adder_reg[i] <= (dct_2d_1_dct_1d_3_mux_flush[i] + dct_2d_1_dct_1d_3_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_3_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_3_coeffs[0] <= 0;
        dct_2d_1_dct_1d_3_coeffs[1] <= 0;
        dct_2d_1_dct_1d_3_coeffs[2] <= 0;
        dct_2d_1_dct_1d_3_coeffs[3] <= 0;
        dct_2d_1_dct_1d_3_coeffs[4] <= 0;
        dct_2d_1_dct_1d_3_coeffs[5] <= 0;
        dct_2d_1_dct_1d_3_coeffs[6] <= 0;
        dct_2d_1_dct_1d_3_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_3_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_3_inputs_counter))
                    0: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_3_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_3_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_3_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_3_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_3_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_3_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_3_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_3_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_3_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_3_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_3_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_3_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_3_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_3_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_3_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_3_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_3_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_3_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_3_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_3_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_3_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_3_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_3_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_3_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_3_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_3_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_3_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_3_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_3_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_3_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_3_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_3_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_3_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_3_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_3_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_3_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_3_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_3_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_3_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_3_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_3_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_3_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_3_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_3_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_3_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_3_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_3_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_3_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_3_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_3_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_3_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_3_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_3_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_3_first_row_passed, dct_2d_1_dct_1d_3_cycles_counter, dct_2d_1_dct_1d_3_adder_reg[0], dct_2d_1_dct_1d_3_adder_reg[1], dct_2d_1_dct_1d_3_adder_reg[2], dct_2d_1_dct_1d_3_adder_reg[3], dct_2d_1_dct_1d_3_adder_reg[4], dct_2d_1_dct_1d_3_adder_reg[5], dct_2d_1_dct_1d_3_adder_reg[6], dct_2d_1_dct_1d_3_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_3_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_3_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_3_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_3_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_3_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_3_mux_flush[i] = dct_2d_1_dct_1d_3_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_3_assign_array_3_assign_27_a = dct_2d_1_dct_1d_3_output_sigs[0];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_28_a = dct_2d_1_dct_1d_3_output_sigs[1];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_29_a = dct_2d_1_dct_1d_3_output_sigs[2];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_30_a = dct_2d_1_dct_1d_3_output_sigs[3];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_31_a = dct_2d_1_dct_1d_3_output_sigs[4];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_32_a = dct_2d_1_dct_1d_3_output_sigs[5];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_33_a = dct_2d_1_dct_1d_3_output_sigs[6];



assign dct_2d_1_dct_1d_3_assign_array_3_assign_34_a = dct_2d_1_dct_1d_3_output_sigs[7];



assign dct_2d_1_dct_1d_3_input_interface_data_in = dct_2d_1_assign_35_b;



assign dct_2d_1_dct_1d_3_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[1] = dct_2d_1_dct_1d_3_assign_array_3_assign_27_a;



assign yf_out_sigs[9] = dct_2d_1_dct_1d_3_assign_array_3_assign_28_a;



assign yf_out_sigs[17] = dct_2d_1_dct_1d_3_assign_array_3_assign_29_a;



assign yf_out_sigs[25] = dct_2d_1_dct_1d_3_assign_array_3_assign_30_a;



assign yf_out_sigs[33] = dct_2d_1_dct_1d_3_assign_array_3_assign_31_a;



assign yf_out_sigs[41] = dct_2d_1_dct_1d_3_assign_array_3_assign_32_a;



assign yf_out_sigs[49] = dct_2d_1_dct_1d_3_assign_array_3_assign_33_a;



assign yf_out_sigs[57] = dct_2d_1_dct_1d_3_assign_array_3_assign_34_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_4_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_4_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_4_input_interface_data_valid) begin
            dct_2d_1_dct_1d_4_data_in_reg <= dct_2d_1_dct_1d_4_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_4_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_4_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_4_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_4_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_4_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_4_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_4_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_4_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_4_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_4_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_4_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_4_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_4_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_4_first_row_passed <= 0;
        dct_2d_1_dct_1d_4_cycles_counter <= 0;
        dct_2d_1_dct_1d_4_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_4_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_4_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_4_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_4_first_row_passed))) begin
                dct_2d_1_dct_1d_4_cycles_counter <= 0;
                dct_2d_1_dct_1d_4_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_4_cycles_counter <= (dct_2d_1_dct_1d_4_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_4_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_4_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_4_inputs_counter <= (dct_2d_1_dct_1d_4_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_4_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_4_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_4_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_4_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_4_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_4_mult_reg[i] <= (dct_2d_1_dct_1d_4_data_in_reg * dct_2d_1_dct_1d_4_coeffs[i]);
                dct_2d_1_dct_1d_4_adder_reg[i] <= (dct_2d_1_dct_1d_4_mux_flush[i] + dct_2d_1_dct_1d_4_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_4_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_4_coeffs[0] <= 0;
        dct_2d_1_dct_1d_4_coeffs[1] <= 0;
        dct_2d_1_dct_1d_4_coeffs[2] <= 0;
        dct_2d_1_dct_1d_4_coeffs[3] <= 0;
        dct_2d_1_dct_1d_4_coeffs[4] <= 0;
        dct_2d_1_dct_1d_4_coeffs[5] <= 0;
        dct_2d_1_dct_1d_4_coeffs[6] <= 0;
        dct_2d_1_dct_1d_4_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_4_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_4_inputs_counter))
                    0: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_4_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_4_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_4_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_4_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_4_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_4_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_4_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_4_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_4_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_4_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_4_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_4_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_4_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_4_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_4_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_4_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_4_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_4_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_4_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_4_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_4_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_4_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_4_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_4_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_4_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_4_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_4_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_4_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_4_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_4_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_4_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_4_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_4_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_4_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_4_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_4_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_4_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_4_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_4_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_4_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_4_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_4_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_4_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_4_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_4_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_4_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_4_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_4_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_4_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_4_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_4_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_4_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_4_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_4_first_row_passed, dct_2d_1_dct_1d_4_cycles_counter, dct_2d_1_dct_1d_4_adder_reg[0], dct_2d_1_dct_1d_4_adder_reg[1], dct_2d_1_dct_1d_4_adder_reg[2], dct_2d_1_dct_1d_4_adder_reg[3], dct_2d_1_dct_1d_4_adder_reg[4], dct_2d_1_dct_1d_4_adder_reg[5], dct_2d_1_dct_1d_4_adder_reg[6], dct_2d_1_dct_1d_4_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_4_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_4_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_4_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_4_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_4_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_4_mux_flush[i] = dct_2d_1_dct_1d_4_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_4_assign_array_4_assign_45_a = dct_2d_1_dct_1d_4_output_sigs[0];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_46_a = dct_2d_1_dct_1d_4_output_sigs[1];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_47_a = dct_2d_1_dct_1d_4_output_sigs[2];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_48_a = dct_2d_1_dct_1d_4_output_sigs[3];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_49_a = dct_2d_1_dct_1d_4_output_sigs[4];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_50_a = dct_2d_1_dct_1d_4_output_sigs[5];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_51_a = dct_2d_1_dct_1d_4_output_sigs[6];



assign dct_2d_1_dct_1d_4_assign_array_4_assign_52_a = dct_2d_1_dct_1d_4_output_sigs[7];



assign dct_2d_1_dct_1d_4_input_interface_data_in = dct_2d_1_assign_53_b;



assign dct_2d_1_dct_1d_4_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[2] = dct_2d_1_dct_1d_4_assign_array_4_assign_45_a;



assign yf_out_sigs[10] = dct_2d_1_dct_1d_4_assign_array_4_assign_46_a;



assign yf_out_sigs[18] = dct_2d_1_dct_1d_4_assign_array_4_assign_47_a;



assign yf_out_sigs[26] = dct_2d_1_dct_1d_4_assign_array_4_assign_48_a;



assign yf_out_sigs[34] = dct_2d_1_dct_1d_4_assign_array_4_assign_49_a;



assign yf_out_sigs[42] = dct_2d_1_dct_1d_4_assign_array_4_assign_50_a;



assign yf_out_sigs[50] = dct_2d_1_dct_1d_4_assign_array_4_assign_51_a;



assign yf_out_sigs[58] = dct_2d_1_dct_1d_4_assign_array_4_assign_52_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_5_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_5_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_5_input_interface_data_valid) begin
            dct_2d_1_dct_1d_5_data_in_reg <= dct_2d_1_dct_1d_5_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_5_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_5_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_5_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_5_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_5_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_5_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_5_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_5_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_5_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_5_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_5_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_5_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_5_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_5_first_row_passed <= 0;
        dct_2d_1_dct_1d_5_cycles_counter <= 0;
        dct_2d_1_dct_1d_5_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_5_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_5_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_5_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_5_first_row_passed))) begin
                dct_2d_1_dct_1d_5_cycles_counter <= 0;
                dct_2d_1_dct_1d_5_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_5_cycles_counter <= (dct_2d_1_dct_1d_5_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_5_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_5_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_5_inputs_counter <= (dct_2d_1_dct_1d_5_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_5_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_5_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_5_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_5_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_5_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_5_mult_reg[i] <= (dct_2d_1_dct_1d_5_data_in_reg * dct_2d_1_dct_1d_5_coeffs[i]);
                dct_2d_1_dct_1d_5_adder_reg[i] <= (dct_2d_1_dct_1d_5_mux_flush[i] + dct_2d_1_dct_1d_5_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_5_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_5_coeffs[0] <= 0;
        dct_2d_1_dct_1d_5_coeffs[1] <= 0;
        dct_2d_1_dct_1d_5_coeffs[2] <= 0;
        dct_2d_1_dct_1d_5_coeffs[3] <= 0;
        dct_2d_1_dct_1d_5_coeffs[4] <= 0;
        dct_2d_1_dct_1d_5_coeffs[5] <= 0;
        dct_2d_1_dct_1d_5_coeffs[6] <= 0;
        dct_2d_1_dct_1d_5_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_5_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_5_inputs_counter))
                    0: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_5_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_5_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_5_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_5_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_5_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_5_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_5_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_5_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_5_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_5_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_5_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_5_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_5_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_5_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_5_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_5_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_5_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_5_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_5_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_5_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_5_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_5_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_5_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_5_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_5_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_5_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_5_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_5_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_5_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_5_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_5_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_5_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_5_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_5_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_5_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_5_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_5_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_5_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_5_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_5_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_5_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_5_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_5_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_5_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_5_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_5_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_5_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_5_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_5_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_5_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_5_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_5_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_5_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_5_first_row_passed, dct_2d_1_dct_1d_5_cycles_counter, dct_2d_1_dct_1d_5_adder_reg[0], dct_2d_1_dct_1d_5_adder_reg[1], dct_2d_1_dct_1d_5_adder_reg[2], dct_2d_1_dct_1d_5_adder_reg[3], dct_2d_1_dct_1d_5_adder_reg[4], dct_2d_1_dct_1d_5_adder_reg[5], dct_2d_1_dct_1d_5_adder_reg[6], dct_2d_1_dct_1d_5_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_5_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_5_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_5_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_5_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_5_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_5_mux_flush[i] = dct_2d_1_dct_1d_5_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_5_assign_array_5_assign_63_a = dct_2d_1_dct_1d_5_output_sigs[0];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_64_a = dct_2d_1_dct_1d_5_output_sigs[1];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_65_a = dct_2d_1_dct_1d_5_output_sigs[2];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_66_a = dct_2d_1_dct_1d_5_output_sigs[3];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_67_a = dct_2d_1_dct_1d_5_output_sigs[4];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_68_a = dct_2d_1_dct_1d_5_output_sigs[5];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_69_a = dct_2d_1_dct_1d_5_output_sigs[6];



assign dct_2d_1_dct_1d_5_assign_array_5_assign_70_a = dct_2d_1_dct_1d_5_output_sigs[7];



assign dct_2d_1_dct_1d_5_input_interface_data_in = dct_2d_1_assign_71_b;



assign dct_2d_1_dct_1d_5_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[3] = dct_2d_1_dct_1d_5_assign_array_5_assign_63_a;



assign yf_out_sigs[11] = dct_2d_1_dct_1d_5_assign_array_5_assign_64_a;



assign yf_out_sigs[19] = dct_2d_1_dct_1d_5_assign_array_5_assign_65_a;



assign yf_out_sigs[27] = dct_2d_1_dct_1d_5_assign_array_5_assign_66_a;



assign yf_out_sigs[35] = dct_2d_1_dct_1d_5_assign_array_5_assign_67_a;



assign yf_out_sigs[43] = dct_2d_1_dct_1d_5_assign_array_5_assign_68_a;



assign yf_out_sigs[51] = dct_2d_1_dct_1d_5_assign_array_5_assign_69_a;



assign yf_out_sigs[59] = dct_2d_1_dct_1d_5_assign_array_5_assign_70_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_6_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_6_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_6_input_interface_data_valid) begin
            dct_2d_1_dct_1d_6_data_in_reg <= dct_2d_1_dct_1d_6_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_6_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_6_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_6_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_6_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_6_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_6_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_6_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_6_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_6_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_6_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_6_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_6_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_6_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_6_first_row_passed <= 0;
        dct_2d_1_dct_1d_6_cycles_counter <= 0;
        dct_2d_1_dct_1d_6_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_6_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_6_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_6_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_6_first_row_passed))) begin
                dct_2d_1_dct_1d_6_cycles_counter <= 0;
                dct_2d_1_dct_1d_6_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_6_cycles_counter <= (dct_2d_1_dct_1d_6_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_6_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_6_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_6_inputs_counter <= (dct_2d_1_dct_1d_6_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_6_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_6_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_6_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_6_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_6_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_6_mult_reg[i] <= (dct_2d_1_dct_1d_6_data_in_reg * dct_2d_1_dct_1d_6_coeffs[i]);
                dct_2d_1_dct_1d_6_adder_reg[i] <= (dct_2d_1_dct_1d_6_mux_flush[i] + dct_2d_1_dct_1d_6_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_6_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_6_coeffs[0] <= 0;
        dct_2d_1_dct_1d_6_coeffs[1] <= 0;
        dct_2d_1_dct_1d_6_coeffs[2] <= 0;
        dct_2d_1_dct_1d_6_coeffs[3] <= 0;
        dct_2d_1_dct_1d_6_coeffs[4] <= 0;
        dct_2d_1_dct_1d_6_coeffs[5] <= 0;
        dct_2d_1_dct_1d_6_coeffs[6] <= 0;
        dct_2d_1_dct_1d_6_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_6_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_6_inputs_counter))
                    0: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_6_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_6_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_6_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_6_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_6_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_6_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_6_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_6_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_6_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_6_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_6_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_6_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_6_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_6_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_6_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_6_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_6_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_6_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_6_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_6_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_6_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_6_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_6_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_6_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_6_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_6_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_6_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_6_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_6_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_6_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_6_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_6_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_6_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_6_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_6_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_6_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_6_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_6_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_6_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_6_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_6_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_6_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_6_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_6_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_6_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_6_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_6_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_6_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_6_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_6_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_6_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_6_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_6_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_6_first_row_passed, dct_2d_1_dct_1d_6_cycles_counter, dct_2d_1_dct_1d_6_adder_reg[0], dct_2d_1_dct_1d_6_adder_reg[1], dct_2d_1_dct_1d_6_adder_reg[2], dct_2d_1_dct_1d_6_adder_reg[3], dct_2d_1_dct_1d_6_adder_reg[4], dct_2d_1_dct_1d_6_adder_reg[5], dct_2d_1_dct_1d_6_adder_reg[6], dct_2d_1_dct_1d_6_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_6_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_6_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_6_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_6_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_6_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_6_mux_flush[i] = dct_2d_1_dct_1d_6_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_6_assign_array_6_assign_81_a = dct_2d_1_dct_1d_6_output_sigs[0];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_82_a = dct_2d_1_dct_1d_6_output_sigs[1];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_83_a = dct_2d_1_dct_1d_6_output_sigs[2];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_84_a = dct_2d_1_dct_1d_6_output_sigs[3];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_85_a = dct_2d_1_dct_1d_6_output_sigs[4];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_86_a = dct_2d_1_dct_1d_6_output_sigs[5];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_87_a = dct_2d_1_dct_1d_6_output_sigs[6];



assign dct_2d_1_dct_1d_6_assign_array_6_assign_88_a = dct_2d_1_dct_1d_6_output_sigs[7];



assign dct_2d_1_dct_1d_6_input_interface_data_in = dct_2d_1_assign_89_b;



assign dct_2d_1_dct_1d_6_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[4] = dct_2d_1_dct_1d_6_assign_array_6_assign_81_a;



assign yf_out_sigs[12] = dct_2d_1_dct_1d_6_assign_array_6_assign_82_a;



assign yf_out_sigs[20] = dct_2d_1_dct_1d_6_assign_array_6_assign_83_a;



assign yf_out_sigs[28] = dct_2d_1_dct_1d_6_assign_array_6_assign_84_a;



assign yf_out_sigs[36] = dct_2d_1_dct_1d_6_assign_array_6_assign_85_a;



assign yf_out_sigs[44] = dct_2d_1_dct_1d_6_assign_array_6_assign_86_a;



assign yf_out_sigs[52] = dct_2d_1_dct_1d_6_assign_array_6_assign_87_a;



assign yf_out_sigs[60] = dct_2d_1_dct_1d_6_assign_array_6_assign_88_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_7_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_7_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_7_input_interface_data_valid) begin
            dct_2d_1_dct_1d_7_data_in_reg <= dct_2d_1_dct_1d_7_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_7_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_7_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_7_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_7_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_7_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_7_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_7_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_7_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_7_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_7_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_7_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_7_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_7_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_7_first_row_passed <= 0;
        dct_2d_1_dct_1d_7_cycles_counter <= 0;
        dct_2d_1_dct_1d_7_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_7_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_7_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_7_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_7_first_row_passed))) begin
                dct_2d_1_dct_1d_7_cycles_counter <= 0;
                dct_2d_1_dct_1d_7_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_7_cycles_counter <= (dct_2d_1_dct_1d_7_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_7_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_7_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_7_inputs_counter <= (dct_2d_1_dct_1d_7_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_7_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_7_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_7_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_7_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_7_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_7_mult_reg[i] <= (dct_2d_1_dct_1d_7_data_in_reg * dct_2d_1_dct_1d_7_coeffs[i]);
                dct_2d_1_dct_1d_7_adder_reg[i] <= (dct_2d_1_dct_1d_7_mux_flush[i] + dct_2d_1_dct_1d_7_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_7_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_7_coeffs[0] <= 0;
        dct_2d_1_dct_1d_7_coeffs[1] <= 0;
        dct_2d_1_dct_1d_7_coeffs[2] <= 0;
        dct_2d_1_dct_1d_7_coeffs[3] <= 0;
        dct_2d_1_dct_1d_7_coeffs[4] <= 0;
        dct_2d_1_dct_1d_7_coeffs[5] <= 0;
        dct_2d_1_dct_1d_7_coeffs[6] <= 0;
        dct_2d_1_dct_1d_7_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_7_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_7_inputs_counter))
                    0: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_7_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_7_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_7_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_7_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_7_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_7_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_7_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_7_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_7_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_7_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_7_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_7_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_7_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_7_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_7_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_7_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_7_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_7_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_7_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_7_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_7_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_7_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_7_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_7_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_7_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_7_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_7_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_7_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_7_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_7_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_7_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_7_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_7_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_7_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_7_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_7_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_7_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_7_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_7_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_7_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_7_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_7_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_7_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_7_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_7_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_7_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_7_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_7_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_7_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_7_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_7_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_7_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_7_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_7_first_row_passed, dct_2d_1_dct_1d_7_cycles_counter, dct_2d_1_dct_1d_7_adder_reg[0], dct_2d_1_dct_1d_7_adder_reg[1], dct_2d_1_dct_1d_7_adder_reg[2], dct_2d_1_dct_1d_7_adder_reg[3], dct_2d_1_dct_1d_7_adder_reg[4], dct_2d_1_dct_1d_7_adder_reg[5], dct_2d_1_dct_1d_7_adder_reg[6], dct_2d_1_dct_1d_7_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_7_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_7_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_7_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_7_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_7_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_7_mux_flush[i] = dct_2d_1_dct_1d_7_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_7_assign_array_7_assign_99_a = dct_2d_1_dct_1d_7_output_sigs[0];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_100_a = dct_2d_1_dct_1d_7_output_sigs[1];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_101_a = dct_2d_1_dct_1d_7_output_sigs[2];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_102_a = dct_2d_1_dct_1d_7_output_sigs[3];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_103_a = dct_2d_1_dct_1d_7_output_sigs[4];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_104_a = dct_2d_1_dct_1d_7_output_sigs[5];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_105_a = dct_2d_1_dct_1d_7_output_sigs[6];



assign dct_2d_1_dct_1d_7_assign_array_7_assign_106_a = dct_2d_1_dct_1d_7_output_sigs[7];



assign dct_2d_1_dct_1d_7_input_interface_data_in = dct_2d_1_assign_107_b;



assign dct_2d_1_dct_1d_7_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[5] = dct_2d_1_dct_1d_7_assign_array_7_assign_99_a;



assign yf_out_sigs[13] = dct_2d_1_dct_1d_7_assign_array_7_assign_100_a;



assign yf_out_sigs[21] = dct_2d_1_dct_1d_7_assign_array_7_assign_101_a;



assign yf_out_sigs[29] = dct_2d_1_dct_1d_7_assign_array_7_assign_102_a;



assign yf_out_sigs[37] = dct_2d_1_dct_1d_7_assign_array_7_assign_103_a;



assign yf_out_sigs[45] = dct_2d_1_dct_1d_7_assign_array_7_assign_104_a;



assign yf_out_sigs[53] = dct_2d_1_dct_1d_7_assign_array_7_assign_105_a;



assign yf_out_sigs[61] = dct_2d_1_dct_1d_7_assign_array_7_assign_106_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_8_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_8_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_8_input_interface_data_valid) begin
            dct_2d_1_dct_1d_8_data_in_reg <= dct_2d_1_dct_1d_8_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_8_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_8_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_8_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_8_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_8_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_8_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_8_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_8_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_8_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_8_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_8_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_8_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_8_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_8_first_row_passed <= 0;
        dct_2d_1_dct_1d_8_cycles_counter <= 0;
        dct_2d_1_dct_1d_8_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_8_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_8_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_8_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_8_first_row_passed))) begin
                dct_2d_1_dct_1d_8_cycles_counter <= 0;
                dct_2d_1_dct_1d_8_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_8_cycles_counter <= (dct_2d_1_dct_1d_8_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_8_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_8_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_8_inputs_counter <= (dct_2d_1_dct_1d_8_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_8_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_8_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_8_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_8_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_8_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_8_mult_reg[i] <= (dct_2d_1_dct_1d_8_data_in_reg * dct_2d_1_dct_1d_8_coeffs[i]);
                dct_2d_1_dct_1d_8_adder_reg[i] <= (dct_2d_1_dct_1d_8_mux_flush[i] + dct_2d_1_dct_1d_8_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_8_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_8_coeffs[0] <= 0;
        dct_2d_1_dct_1d_8_coeffs[1] <= 0;
        dct_2d_1_dct_1d_8_coeffs[2] <= 0;
        dct_2d_1_dct_1d_8_coeffs[3] <= 0;
        dct_2d_1_dct_1d_8_coeffs[4] <= 0;
        dct_2d_1_dct_1d_8_coeffs[5] <= 0;
        dct_2d_1_dct_1d_8_coeffs[6] <= 0;
        dct_2d_1_dct_1d_8_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_8_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_8_inputs_counter))
                    0: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_8_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_8_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_8_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_8_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_8_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_8_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_8_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_8_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_8_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_8_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_8_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_8_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_8_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_8_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_8_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_8_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_8_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_8_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_8_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_8_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_8_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_8_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_8_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_8_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_8_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_8_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_8_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_8_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_8_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_8_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_8_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_8_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_8_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_8_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_8_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_8_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_8_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_8_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_8_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_8_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_8_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_8_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_8_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_8_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_8_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_8_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_8_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_8_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_8_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_8_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_8_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_8_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_8_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_8_first_row_passed, dct_2d_1_dct_1d_8_cycles_counter, dct_2d_1_dct_1d_8_adder_reg[0], dct_2d_1_dct_1d_8_adder_reg[1], dct_2d_1_dct_1d_8_adder_reg[2], dct_2d_1_dct_1d_8_adder_reg[3], dct_2d_1_dct_1d_8_adder_reg[4], dct_2d_1_dct_1d_8_adder_reg[5], dct_2d_1_dct_1d_8_adder_reg[6], dct_2d_1_dct_1d_8_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_8_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_8_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_8_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_8_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_8_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_8_mux_flush[i] = dct_2d_1_dct_1d_8_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_8_assign_array_8_assign_117_a = dct_2d_1_dct_1d_8_output_sigs[0];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_118_a = dct_2d_1_dct_1d_8_output_sigs[1];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_119_a = dct_2d_1_dct_1d_8_output_sigs[2];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_120_a = dct_2d_1_dct_1d_8_output_sigs[3];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_121_a = dct_2d_1_dct_1d_8_output_sigs[4];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_122_a = dct_2d_1_dct_1d_8_output_sigs[5];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_123_a = dct_2d_1_dct_1d_8_output_sigs[6];



assign dct_2d_1_dct_1d_8_assign_array_8_assign_124_a = dct_2d_1_dct_1d_8_output_sigs[7];



assign dct_2d_1_dct_1d_8_input_interface_data_in = dct_2d_1_assign_125_b;



assign dct_2d_1_dct_1d_8_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[6] = dct_2d_1_dct_1d_8_assign_array_8_assign_117_a;



assign yf_out_sigs[14] = dct_2d_1_dct_1d_8_assign_array_8_assign_118_a;



assign yf_out_sigs[22] = dct_2d_1_dct_1d_8_assign_array_8_assign_119_a;



assign yf_out_sigs[30] = dct_2d_1_dct_1d_8_assign_array_8_assign_120_a;



assign yf_out_sigs[38] = dct_2d_1_dct_1d_8_assign_array_8_assign_121_a;



assign yf_out_sigs[46] = dct_2d_1_dct_1d_8_assign_array_8_assign_122_a;



assign yf_out_sigs[54] = dct_2d_1_dct_1d_8_assign_array_8_assign_123_a;



assign yf_out_sigs[62] = dct_2d_1_dct_1d_8_assign_array_8_assign_124_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_9_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_9_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_9_input_interface_data_valid) begin
            dct_2d_1_dct_1d_9_data_in_reg <= dct_2d_1_dct_1d_9_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_9_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_9_output_interface_data_valid <= 0;
        dct_2d_1_dct_1d_9_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_9_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_9_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_9_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_9_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_9_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_9_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_9_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_dct_1d_9_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_1_dct_1d_9_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_9_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_9_first_row_passed <= 0;
        dct_2d_1_dct_1d_9_cycles_counter <= 0;
        dct_2d_1_dct_1d_9_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_9_input_interface_data_valid) begin
            if (((dct_2d_1_dct_1d_9_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_9_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_9_first_row_passed))) begin
                dct_2d_1_dct_1d_9_cycles_counter <= 0;
                dct_2d_1_dct_1d_9_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_9_cycles_counter <= (dct_2d_1_dct_1d_9_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_9_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_9_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_9_inputs_counter <= (dct_2d_1_dct_1d_9_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_9_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_9_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_9_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_9_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_9_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_9_mult_reg[i] <= (dct_2d_1_dct_1d_9_data_in_reg * dct_2d_1_dct_1d_9_coeffs[i]);
                dct_2d_1_dct_1d_9_adder_reg[i] <= (dct_2d_1_dct_1d_9_mux_flush[i] + dct_2d_1_dct_1d_9_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_9_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_9_coeffs[0] <= 0;
        dct_2d_1_dct_1d_9_coeffs[1] <= 0;
        dct_2d_1_dct_1d_9_coeffs[2] <= 0;
        dct_2d_1_dct_1d_9_coeffs[3] <= 0;
        dct_2d_1_dct_1d_9_coeffs[4] <= 0;
        dct_2d_1_dct_1d_9_coeffs[5] <= 0;
        dct_2d_1_dct_1d_9_coeffs[6] <= 0;
        dct_2d_1_dct_1d_9_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_dct_1d_9_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_9_inputs_counter))
                    0: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_9_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_9_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_9_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_9_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_9_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_9_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_9_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_9_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_9_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_9_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_9_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_9_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_9_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_9_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_9_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_9_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_9_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_9_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_9_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_9_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_9_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_9_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_9_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_9_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_9_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_9_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_9_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_9_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_9_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_9_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_9_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_9_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_9_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_9_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_9_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_9_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_9_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_9_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_9_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_9_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_9_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_9_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_9_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_9_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_9_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_9_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_9_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_9_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_9_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_9_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_9_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_9_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_9_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_9_first_row_passed, dct_2d_1_dct_1d_9_cycles_counter, dct_2d_1_dct_1d_9_adder_reg[0], dct_2d_1_dct_1d_9_adder_reg[1], dct_2d_1_dct_1d_9_adder_reg[2], dct_2d_1_dct_1d_9_adder_reg[3], dct_2d_1_dct_1d_9_adder_reg[4], dct_2d_1_dct_1d_9_adder_reg[5], dct_2d_1_dct_1d_9_adder_reg[6], dct_2d_1_dct_1d_9_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_9_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_9_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_9_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_9_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_9_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_9_mux_flush[i] = dct_2d_1_dct_1d_9_adder_reg[i];
        end
    end
end



assign dct_2d_1_dct_1d_9_assign_array_9_assign_135_a = dct_2d_1_dct_1d_9_output_sigs[0];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_136_a = dct_2d_1_dct_1d_9_output_sigs[1];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_137_a = dct_2d_1_dct_1d_9_output_sigs[2];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_138_a = dct_2d_1_dct_1d_9_output_sigs[3];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_139_a = dct_2d_1_dct_1d_9_output_sigs[4];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_140_a = dct_2d_1_dct_1d_9_output_sigs[5];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_141_a = dct_2d_1_dct_1d_9_output_sigs[6];



assign dct_2d_1_dct_1d_9_assign_array_9_assign_142_a = dct_2d_1_dct_1d_9_output_sigs[7];



assign dct_2d_1_dct_1d_9_input_interface_data_in = dct_2d_1_assign_143_b;



assign dct_2d_1_dct_1d_9_input_interface_data_valid = dct_2d_1_assign_18_b;



assign yf_out_sigs[7] = dct_2d_1_dct_1d_9_assign_array_9_assign_135_a;



assign yf_out_sigs[15] = dct_2d_1_dct_1d_9_assign_array_9_assign_136_a;



assign yf_out_sigs[23] = dct_2d_1_dct_1d_9_assign_array_9_assign_137_a;



assign yf_out_sigs[31] = dct_2d_1_dct_1d_9_assign_array_9_assign_138_a;



assign yf_out_sigs[39] = dct_2d_1_dct_1d_9_assign_array_9_assign_139_a;



assign yf_out_sigs[47] = dct_2d_1_dct_1d_9_assign_array_9_assign_140_a;



assign yf_out_sigs[55] = dct_2d_1_dct_1d_9_assign_array_9_assign_141_a;



assign yf_out_sigs[63] = dct_2d_1_dct_1d_9_assign_array_9_assign_142_a;



assign dct_2d_1_outputs_data_valid = dct_2d_1_dct_1d_2_output_interface_data_valid;

// Align to zero each input
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_INPUT_SUBTRACT
    if (reset == 0) begin
        dct_2d_1_input_1d_stage_1_data_in <= 0;
        dct_2d_1_data_valid_reg <= 0;
        dct_2d_1_input_1d_stage_1_data_valid <= 0;
        dct_2d_1_data_in_signed <= 0;
    end
    else begin
        if (y_data_valid) begin
            dct_2d_1_data_in_signed <= y_data_in;
            dct_2d_1_input_1d_stage_1_data_in <= (dct_2d_1_data_in_signed - 128);
            dct_2d_1_data_valid_reg <= y_data_valid;
            dct_2d_1_input_1d_stage_1_data_valid <= dct_2d_1_data_valid_reg;
        end
    end
end



assign yf_data_valid = dct_2d_1_data_valid_reg2;

// Counter update
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_COUNTER_UPDATE
    if (reset == 0) begin
        dct_2d_1_counter <= 0;
    end
    else begin
        if (dct_2d_1_outputs_data_valid) begin
            if (($signed({1'b0, dct_2d_1_counter}) == (8 - 1))) begin
                dct_2d_1_counter <= 0;
            end
            else begin
                dct_2d_1_counter <= (dct_2d_1_counter + 1);
            end
        end
    end
end

// Data valid signal assignment when the outputs are valid
always @(dct_2d_1_outputs_data_valid, dct_2d_1_counter) begin: ZYBO_DCT_2D_1_DATA_VALID_2D
    if ((dct_2d_1_outputs_data_valid && (dct_2d_1_counter == 0))) begin
        dct_2d_1_data_valid_reg2 = 1'b1;
    end
    else begin
        dct_2d_1_data_valid_reg2 = 1'b0;
    end
end

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_1_INPUT_REG
    if (reset == 0) begin
        dct_2d_1_dct_1d_1_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_1_input_1d_stage_1_data_valid) begin
            dct_2d_1_dct_1d_1_data_in_reg <= dct_2d_1_input_1d_stage_1_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_1_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_1_assign_18_b <= 0;
        dct_2d_1_dct_1d_1_output_sigs[0] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[1] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[2] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[3] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[4] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[5] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[6] <= 0;
        dct_2d_1_dct_1d_1_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_1_output_sigs[i] <= ($signed(dct_2d_1_dct_1d_1_adder_reg[i][25-1:14]) + dct_2d_1_dct_1d_1_adder_reg[i][13]);
        end
        if (((dct_2d_1_dct_1d_1_cycles_counter == (8 + 2)) || (dct_2d_1_dct_1d_1_first_row_passed && ($signed({1'b0, dct_2d_1_dct_1d_1_cycles_counter}) == (8 - 1))))) begin
            dct_2d_1_assign_18_b <= 1'b1;
        end
        else begin
            dct_2d_1_assign_18_b <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_1_COUNTERS
    if (reset == 0) begin
        dct_2d_1_dct_1d_1_first_row_passed <= 0;
        dct_2d_1_dct_1d_1_cycles_counter <= 0;
        dct_2d_1_dct_1d_1_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_1_input_1d_stage_1_data_valid) begin
            if (((dct_2d_1_dct_1d_1_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_1_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_1_first_row_passed))) begin
                dct_2d_1_dct_1d_1_cycles_counter <= 0;
                dct_2d_1_dct_1d_1_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_1_dct_1d_1_cycles_counter <= (dct_2d_1_dct_1d_1_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_1_dct_1d_1_inputs_counter}) == (8 - 1))) begin
                dct_2d_1_dct_1d_1_inputs_counter <= 0;
            end
            else begin
                dct_2d_1_dct_1d_1_inputs_counter <= (dct_2d_1_dct_1d_1_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_1_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_1_adder_reg[0] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[1] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[2] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[3] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[4] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[5] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[6] <= 0;
        dct_2d_1_dct_1d_1_adder_reg[7] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[0] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[1] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[2] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[3] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[4] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[5] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[6] <= 0;
        dct_2d_1_dct_1d_1_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_1_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_1_dct_1d_1_mult_reg[i] <= (dct_2d_1_dct_1d_1_data_in_reg * dct_2d_1_dct_1d_1_coeffs[i]);
                dct_2d_1_dct_1d_1_adder_reg[i] <= (dct_2d_1_dct_1d_1_mux_flush[i] + dct_2d_1_dct_1d_1_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_1_DCT_1D_1_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_1_dct_1d_1_coeffs[0] <= 0;
        dct_2d_1_dct_1d_1_coeffs[1] <= 0;
        dct_2d_1_dct_1d_1_coeffs[2] <= 0;
        dct_2d_1_dct_1d_1_coeffs[3] <= 0;
        dct_2d_1_dct_1d_1_coeffs[4] <= 0;
        dct_2d_1_dct_1d_1_coeffs[5] <= 0;
        dct_2d_1_dct_1d_1_coeffs[6] <= 0;
        dct_2d_1_dct_1d_1_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_1_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_1_dct_1d_1_inputs_counter))
                    0: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    1: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    2: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    3: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    4: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    5: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    6: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    7: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    8: dct_2d_1_dct_1d_1_coeffs[i] <= 8035;
                    9: dct_2d_1_dct_1d_1_coeffs[i] <= 6811;
                    10: dct_2d_1_dct_1d_1_coeffs[i] <= 4551;
                    11: dct_2d_1_dct_1d_1_coeffs[i] <= 1598;
                    12: dct_2d_1_dct_1d_1_coeffs[i] <= (-1598);
                    13: dct_2d_1_dct_1d_1_coeffs[i] <= (-4551);
                    14: dct_2d_1_dct_1d_1_coeffs[i] <= (-6811);
                    15: dct_2d_1_dct_1d_1_coeffs[i] <= (-8035);
                    16: dct_2d_1_dct_1d_1_coeffs[i] <= 7568;
                    17: dct_2d_1_dct_1d_1_coeffs[i] <= 3135;
                    18: dct_2d_1_dct_1d_1_coeffs[i] <= (-3135);
                    19: dct_2d_1_dct_1d_1_coeffs[i] <= (-7568);
                    20: dct_2d_1_dct_1d_1_coeffs[i] <= (-7568);
                    21: dct_2d_1_dct_1d_1_coeffs[i] <= (-3135);
                    22: dct_2d_1_dct_1d_1_coeffs[i] <= 3135;
                    23: dct_2d_1_dct_1d_1_coeffs[i] <= 7568;
                    24: dct_2d_1_dct_1d_1_coeffs[i] <= 6811;
                    25: dct_2d_1_dct_1d_1_coeffs[i] <= (-1598);
                    26: dct_2d_1_dct_1d_1_coeffs[i] <= (-8035);
                    27: dct_2d_1_dct_1d_1_coeffs[i] <= (-4551);
                    28: dct_2d_1_dct_1d_1_coeffs[i] <= 4551;
                    29: dct_2d_1_dct_1d_1_coeffs[i] <= 8035;
                    30: dct_2d_1_dct_1d_1_coeffs[i] <= 1598;
                    31: dct_2d_1_dct_1d_1_coeffs[i] <= (-6811);
                    32: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    33: dct_2d_1_dct_1d_1_coeffs[i] <= (-5793);
                    34: dct_2d_1_dct_1d_1_coeffs[i] <= (-5793);
                    35: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    36: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    37: dct_2d_1_dct_1d_1_coeffs[i] <= (-5793);
                    38: dct_2d_1_dct_1d_1_coeffs[i] <= (-5793);
                    39: dct_2d_1_dct_1d_1_coeffs[i] <= 5793;
                    40: dct_2d_1_dct_1d_1_coeffs[i] <= 4551;
                    41: dct_2d_1_dct_1d_1_coeffs[i] <= (-8035);
                    42: dct_2d_1_dct_1d_1_coeffs[i] <= 1598;
                    43: dct_2d_1_dct_1d_1_coeffs[i] <= 6811;
                    44: dct_2d_1_dct_1d_1_coeffs[i] <= (-6811);
                    45: dct_2d_1_dct_1d_1_coeffs[i] <= (-1598);
                    46: dct_2d_1_dct_1d_1_coeffs[i] <= 8035;
                    47: dct_2d_1_dct_1d_1_coeffs[i] <= (-4551);
                    48: dct_2d_1_dct_1d_1_coeffs[i] <= 3135;
                    49: dct_2d_1_dct_1d_1_coeffs[i] <= (-7568);
                    50: dct_2d_1_dct_1d_1_coeffs[i] <= 7568;
                    51: dct_2d_1_dct_1d_1_coeffs[i] <= (-3135);
                    52: dct_2d_1_dct_1d_1_coeffs[i] <= (-3135);
                    53: dct_2d_1_dct_1d_1_coeffs[i] <= 7568;
                    54: dct_2d_1_dct_1d_1_coeffs[i] <= (-7568);
                    55: dct_2d_1_dct_1d_1_coeffs[i] <= 3135;
                    56: dct_2d_1_dct_1d_1_coeffs[i] <= 1598;
                    57: dct_2d_1_dct_1d_1_coeffs[i] <= (-4551);
                    58: dct_2d_1_dct_1d_1_coeffs[i] <= 6811;
                    59: dct_2d_1_dct_1d_1_coeffs[i] <= (-8035);
                    60: dct_2d_1_dct_1d_1_coeffs[i] <= 8035;
                    61: dct_2d_1_dct_1d_1_coeffs[i] <= (-6811);
                    62: dct_2d_1_dct_1d_1_coeffs[i] <= 4551;
                    default: dct_2d_1_dct_1d_1_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_1_dct_1d_1_first_row_passed, dct_2d_1_dct_1d_1_cycles_counter, dct_2d_1_dct_1d_1_adder_reg[0], dct_2d_1_dct_1d_1_adder_reg[1], dct_2d_1_dct_1d_1_adder_reg[2], dct_2d_1_dct_1d_1_adder_reg[3], dct_2d_1_dct_1d_1_adder_reg[4], dct_2d_1_dct_1d_1_adder_reg[5], dct_2d_1_dct_1d_1_adder_reg[6], dct_2d_1_dct_1d_1_adder_reg[7]) begin: ZYBO_DCT_2D_1_DCT_1D_1_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_1_dct_1d_1_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_1_dct_1d_1_cycles_counter}) == (8 - 1)) && dct_2d_1_dct_1d_1_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_1_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_1_dct_1d_1_mux_flush[i] = dct_2d_1_dct_1d_1_adder_reg[i];
        end
    end
end



assign dct_2d_1_assign_17_b = dct_2d_1_dct_1d_1_output_sigs[0];



assign dct_2d_1_assign_35_b = dct_2d_1_dct_1d_1_output_sigs[1];



assign dct_2d_1_assign_53_b = dct_2d_1_dct_1d_1_output_sigs[2];



assign dct_2d_1_assign_71_b = dct_2d_1_dct_1d_1_output_sigs[3];



assign dct_2d_1_assign_89_b = dct_2d_1_dct_1d_1_output_sigs[4];



assign dct_2d_1_assign_107_b = dct_2d_1_dct_1d_1_output_sigs[5];



assign dct_2d_1_assign_125_b = dct_2d_1_dct_1d_1_output_sigs[6];



assign dct_2d_1_assign_143_b = dct_2d_1_dct_1d_1_output_sigs[7];

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_11_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_11_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_11_input_interface_data_valid) begin
            dct_2d_2_dct_1d_11_data_in_reg <= dct_2d_2_dct_1d_11_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_11_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_11_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_11_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_11_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_11_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_11_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_11_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_11_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_11_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_11_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_11_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_11_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_11_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_11_first_row_passed <= 0;
        dct_2d_2_dct_1d_11_cycles_counter <= 0;
        dct_2d_2_dct_1d_11_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_11_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_11_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_11_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_11_first_row_passed))) begin
                dct_2d_2_dct_1d_11_cycles_counter <= 0;
                dct_2d_2_dct_1d_11_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_11_cycles_counter <= (dct_2d_2_dct_1d_11_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_11_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_11_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_11_inputs_counter <= (dct_2d_2_dct_1d_11_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_11_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_11_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_11_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_11_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_11_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_11_mult_reg[i] <= (dct_2d_2_dct_1d_11_data_in_reg * dct_2d_2_dct_1d_11_coeffs[i]);
                dct_2d_2_dct_1d_11_adder_reg[i] <= (dct_2d_2_dct_1d_11_mux_flush[i] + dct_2d_2_dct_1d_11_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_11_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_11_coeffs[0] <= 0;
        dct_2d_2_dct_1d_11_coeffs[1] <= 0;
        dct_2d_2_dct_1d_11_coeffs[2] <= 0;
        dct_2d_2_dct_1d_11_coeffs[3] <= 0;
        dct_2d_2_dct_1d_11_coeffs[4] <= 0;
        dct_2d_2_dct_1d_11_coeffs[5] <= 0;
        dct_2d_2_dct_1d_11_coeffs[6] <= 0;
        dct_2d_2_dct_1d_11_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_11_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_11_inputs_counter))
                    0: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_11_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_11_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_11_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_11_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_11_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_11_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_11_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_11_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_11_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_11_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_11_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_11_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_11_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_11_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_11_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_11_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_11_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_11_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_11_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_11_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_11_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_11_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_11_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_11_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_11_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_11_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_11_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_11_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_11_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_11_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_11_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_11_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_11_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_11_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_11_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_11_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_11_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_11_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_11_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_11_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_11_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_11_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_11_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_11_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_11_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_11_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_11_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_11_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_11_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_11_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_11_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_11_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_11_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_11_first_row_passed, dct_2d_2_dct_1d_11_cycles_counter, dct_2d_2_dct_1d_11_adder_reg[0], dct_2d_2_dct_1d_11_adder_reg[1], dct_2d_2_dct_1d_11_adder_reg[2], dct_2d_2_dct_1d_11_adder_reg[3], dct_2d_2_dct_1d_11_adder_reg[4], dct_2d_2_dct_1d_11_adder_reg[5], dct_2d_2_dct_1d_11_adder_reg[6], dct_2d_2_dct_1d_11_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_11_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_11_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_11_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_11_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_11_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_11_mux_flush[i] = dct_2d_2_dct_1d_11_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_11_assign_array_11_assign_162_a = dct_2d_2_dct_1d_11_output_sigs[0];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_163_a = dct_2d_2_dct_1d_11_output_sigs[1];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_164_a = dct_2d_2_dct_1d_11_output_sigs[2];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_165_a = dct_2d_2_dct_1d_11_output_sigs[3];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_166_a = dct_2d_2_dct_1d_11_output_sigs[4];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_167_a = dct_2d_2_dct_1d_11_output_sigs[5];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_168_a = dct_2d_2_dct_1d_11_output_sigs[6];



assign dct_2d_2_dct_1d_11_assign_array_11_assign_169_a = dct_2d_2_dct_1d_11_output_sigs[7];



assign dct_2d_2_dct_1d_11_input_interface_data_in = dct_2d_2_assign_170_b;



assign dct_2d_2_dct_1d_11_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[0] = dct_2d_2_dct_1d_11_assign_array_11_assign_162_a;



assign cbf_out_sigs[8] = dct_2d_2_dct_1d_11_assign_array_11_assign_163_a;



assign cbf_out_sigs[16] = dct_2d_2_dct_1d_11_assign_array_11_assign_164_a;



assign cbf_out_sigs[24] = dct_2d_2_dct_1d_11_assign_array_11_assign_165_a;



assign cbf_out_sigs[32] = dct_2d_2_dct_1d_11_assign_array_11_assign_166_a;



assign cbf_out_sigs[40] = dct_2d_2_dct_1d_11_assign_array_11_assign_167_a;



assign cbf_out_sigs[48] = dct_2d_2_dct_1d_11_assign_array_11_assign_168_a;



assign cbf_out_sigs[56] = dct_2d_2_dct_1d_11_assign_array_11_assign_169_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_12_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_12_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_12_input_interface_data_valid) begin
            dct_2d_2_dct_1d_12_data_in_reg <= dct_2d_2_dct_1d_12_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_12_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_12_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_12_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_12_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_12_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_12_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_12_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_12_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_12_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_12_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_12_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_12_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_12_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_12_first_row_passed <= 0;
        dct_2d_2_dct_1d_12_cycles_counter <= 0;
        dct_2d_2_dct_1d_12_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_12_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_12_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_12_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_12_first_row_passed))) begin
                dct_2d_2_dct_1d_12_cycles_counter <= 0;
                dct_2d_2_dct_1d_12_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_12_cycles_counter <= (dct_2d_2_dct_1d_12_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_12_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_12_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_12_inputs_counter <= (dct_2d_2_dct_1d_12_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_12_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_12_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_12_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_12_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_12_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_12_mult_reg[i] <= (dct_2d_2_dct_1d_12_data_in_reg * dct_2d_2_dct_1d_12_coeffs[i]);
                dct_2d_2_dct_1d_12_adder_reg[i] <= (dct_2d_2_dct_1d_12_mux_flush[i] + dct_2d_2_dct_1d_12_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_12_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_12_coeffs[0] <= 0;
        dct_2d_2_dct_1d_12_coeffs[1] <= 0;
        dct_2d_2_dct_1d_12_coeffs[2] <= 0;
        dct_2d_2_dct_1d_12_coeffs[3] <= 0;
        dct_2d_2_dct_1d_12_coeffs[4] <= 0;
        dct_2d_2_dct_1d_12_coeffs[5] <= 0;
        dct_2d_2_dct_1d_12_coeffs[6] <= 0;
        dct_2d_2_dct_1d_12_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_12_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_12_inputs_counter))
                    0: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_12_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_12_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_12_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_12_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_12_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_12_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_12_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_12_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_12_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_12_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_12_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_12_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_12_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_12_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_12_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_12_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_12_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_12_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_12_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_12_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_12_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_12_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_12_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_12_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_12_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_12_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_12_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_12_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_12_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_12_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_12_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_12_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_12_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_12_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_12_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_12_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_12_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_12_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_12_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_12_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_12_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_12_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_12_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_12_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_12_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_12_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_12_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_12_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_12_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_12_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_12_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_12_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_12_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_12_first_row_passed, dct_2d_2_dct_1d_12_cycles_counter, dct_2d_2_dct_1d_12_adder_reg[0], dct_2d_2_dct_1d_12_adder_reg[1], dct_2d_2_dct_1d_12_adder_reg[2], dct_2d_2_dct_1d_12_adder_reg[3], dct_2d_2_dct_1d_12_adder_reg[4], dct_2d_2_dct_1d_12_adder_reg[5], dct_2d_2_dct_1d_12_adder_reg[6], dct_2d_2_dct_1d_12_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_12_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_12_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_12_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_12_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_12_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_12_mux_flush[i] = dct_2d_2_dct_1d_12_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_12_assign_array_12_assign_180_a = dct_2d_2_dct_1d_12_output_sigs[0];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_181_a = dct_2d_2_dct_1d_12_output_sigs[1];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_182_a = dct_2d_2_dct_1d_12_output_sigs[2];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_183_a = dct_2d_2_dct_1d_12_output_sigs[3];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_184_a = dct_2d_2_dct_1d_12_output_sigs[4];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_185_a = dct_2d_2_dct_1d_12_output_sigs[5];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_186_a = dct_2d_2_dct_1d_12_output_sigs[6];



assign dct_2d_2_dct_1d_12_assign_array_12_assign_187_a = dct_2d_2_dct_1d_12_output_sigs[7];



assign dct_2d_2_dct_1d_12_input_interface_data_in = dct_2d_2_assign_188_b;



assign dct_2d_2_dct_1d_12_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[1] = dct_2d_2_dct_1d_12_assign_array_12_assign_180_a;



assign cbf_out_sigs[9] = dct_2d_2_dct_1d_12_assign_array_12_assign_181_a;



assign cbf_out_sigs[17] = dct_2d_2_dct_1d_12_assign_array_12_assign_182_a;



assign cbf_out_sigs[25] = dct_2d_2_dct_1d_12_assign_array_12_assign_183_a;



assign cbf_out_sigs[33] = dct_2d_2_dct_1d_12_assign_array_12_assign_184_a;



assign cbf_out_sigs[41] = dct_2d_2_dct_1d_12_assign_array_12_assign_185_a;



assign cbf_out_sigs[49] = dct_2d_2_dct_1d_12_assign_array_12_assign_186_a;



assign cbf_out_sigs[57] = dct_2d_2_dct_1d_12_assign_array_12_assign_187_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_13_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_13_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_13_input_interface_data_valid) begin
            dct_2d_2_dct_1d_13_data_in_reg <= dct_2d_2_dct_1d_13_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_13_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_13_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_13_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_13_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_13_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_13_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_13_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_13_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_13_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_13_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_13_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_13_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_13_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_13_first_row_passed <= 0;
        dct_2d_2_dct_1d_13_cycles_counter <= 0;
        dct_2d_2_dct_1d_13_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_13_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_13_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_13_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_13_first_row_passed))) begin
                dct_2d_2_dct_1d_13_cycles_counter <= 0;
                dct_2d_2_dct_1d_13_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_13_cycles_counter <= (dct_2d_2_dct_1d_13_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_13_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_13_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_13_inputs_counter <= (dct_2d_2_dct_1d_13_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_13_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_13_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_13_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_13_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_13_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_13_mult_reg[i] <= (dct_2d_2_dct_1d_13_data_in_reg * dct_2d_2_dct_1d_13_coeffs[i]);
                dct_2d_2_dct_1d_13_adder_reg[i] <= (dct_2d_2_dct_1d_13_mux_flush[i] + dct_2d_2_dct_1d_13_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_13_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_13_coeffs[0] <= 0;
        dct_2d_2_dct_1d_13_coeffs[1] <= 0;
        dct_2d_2_dct_1d_13_coeffs[2] <= 0;
        dct_2d_2_dct_1d_13_coeffs[3] <= 0;
        dct_2d_2_dct_1d_13_coeffs[4] <= 0;
        dct_2d_2_dct_1d_13_coeffs[5] <= 0;
        dct_2d_2_dct_1d_13_coeffs[6] <= 0;
        dct_2d_2_dct_1d_13_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_13_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_13_inputs_counter))
                    0: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_13_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_13_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_13_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_13_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_13_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_13_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_13_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_13_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_13_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_13_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_13_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_13_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_13_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_13_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_13_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_13_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_13_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_13_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_13_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_13_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_13_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_13_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_13_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_13_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_13_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_13_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_13_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_13_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_13_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_13_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_13_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_13_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_13_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_13_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_13_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_13_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_13_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_13_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_13_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_13_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_13_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_13_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_13_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_13_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_13_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_13_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_13_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_13_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_13_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_13_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_13_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_13_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_13_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_13_first_row_passed, dct_2d_2_dct_1d_13_cycles_counter, dct_2d_2_dct_1d_13_adder_reg[0], dct_2d_2_dct_1d_13_adder_reg[1], dct_2d_2_dct_1d_13_adder_reg[2], dct_2d_2_dct_1d_13_adder_reg[3], dct_2d_2_dct_1d_13_adder_reg[4], dct_2d_2_dct_1d_13_adder_reg[5], dct_2d_2_dct_1d_13_adder_reg[6], dct_2d_2_dct_1d_13_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_13_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_13_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_13_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_13_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_13_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_13_mux_flush[i] = dct_2d_2_dct_1d_13_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_13_assign_array_13_assign_198_a = dct_2d_2_dct_1d_13_output_sigs[0];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_199_a = dct_2d_2_dct_1d_13_output_sigs[1];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_200_a = dct_2d_2_dct_1d_13_output_sigs[2];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_201_a = dct_2d_2_dct_1d_13_output_sigs[3];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_202_a = dct_2d_2_dct_1d_13_output_sigs[4];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_203_a = dct_2d_2_dct_1d_13_output_sigs[5];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_204_a = dct_2d_2_dct_1d_13_output_sigs[6];



assign dct_2d_2_dct_1d_13_assign_array_13_assign_205_a = dct_2d_2_dct_1d_13_output_sigs[7];



assign dct_2d_2_dct_1d_13_input_interface_data_in = dct_2d_2_assign_206_b;



assign dct_2d_2_dct_1d_13_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[2] = dct_2d_2_dct_1d_13_assign_array_13_assign_198_a;



assign cbf_out_sigs[10] = dct_2d_2_dct_1d_13_assign_array_13_assign_199_a;



assign cbf_out_sigs[18] = dct_2d_2_dct_1d_13_assign_array_13_assign_200_a;



assign cbf_out_sigs[26] = dct_2d_2_dct_1d_13_assign_array_13_assign_201_a;



assign cbf_out_sigs[34] = dct_2d_2_dct_1d_13_assign_array_13_assign_202_a;



assign cbf_out_sigs[42] = dct_2d_2_dct_1d_13_assign_array_13_assign_203_a;



assign cbf_out_sigs[50] = dct_2d_2_dct_1d_13_assign_array_13_assign_204_a;



assign cbf_out_sigs[58] = dct_2d_2_dct_1d_13_assign_array_13_assign_205_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_14_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_14_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_14_input_interface_data_valid) begin
            dct_2d_2_dct_1d_14_data_in_reg <= dct_2d_2_dct_1d_14_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_14_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_14_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_14_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_14_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_14_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_14_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_14_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_14_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_14_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_14_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_14_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_14_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_14_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_14_first_row_passed <= 0;
        dct_2d_2_dct_1d_14_cycles_counter <= 0;
        dct_2d_2_dct_1d_14_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_14_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_14_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_14_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_14_first_row_passed))) begin
                dct_2d_2_dct_1d_14_cycles_counter <= 0;
                dct_2d_2_dct_1d_14_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_14_cycles_counter <= (dct_2d_2_dct_1d_14_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_14_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_14_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_14_inputs_counter <= (dct_2d_2_dct_1d_14_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_14_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_14_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_14_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_14_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_14_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_14_mult_reg[i] <= (dct_2d_2_dct_1d_14_data_in_reg * dct_2d_2_dct_1d_14_coeffs[i]);
                dct_2d_2_dct_1d_14_adder_reg[i] <= (dct_2d_2_dct_1d_14_mux_flush[i] + dct_2d_2_dct_1d_14_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_14_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_14_coeffs[0] <= 0;
        dct_2d_2_dct_1d_14_coeffs[1] <= 0;
        dct_2d_2_dct_1d_14_coeffs[2] <= 0;
        dct_2d_2_dct_1d_14_coeffs[3] <= 0;
        dct_2d_2_dct_1d_14_coeffs[4] <= 0;
        dct_2d_2_dct_1d_14_coeffs[5] <= 0;
        dct_2d_2_dct_1d_14_coeffs[6] <= 0;
        dct_2d_2_dct_1d_14_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_14_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_14_inputs_counter))
                    0: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_14_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_14_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_14_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_14_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_14_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_14_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_14_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_14_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_14_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_14_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_14_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_14_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_14_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_14_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_14_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_14_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_14_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_14_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_14_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_14_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_14_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_14_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_14_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_14_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_14_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_14_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_14_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_14_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_14_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_14_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_14_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_14_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_14_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_14_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_14_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_14_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_14_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_14_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_14_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_14_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_14_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_14_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_14_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_14_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_14_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_14_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_14_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_14_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_14_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_14_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_14_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_14_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_14_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_14_first_row_passed, dct_2d_2_dct_1d_14_cycles_counter, dct_2d_2_dct_1d_14_adder_reg[0], dct_2d_2_dct_1d_14_adder_reg[1], dct_2d_2_dct_1d_14_adder_reg[2], dct_2d_2_dct_1d_14_adder_reg[3], dct_2d_2_dct_1d_14_adder_reg[4], dct_2d_2_dct_1d_14_adder_reg[5], dct_2d_2_dct_1d_14_adder_reg[6], dct_2d_2_dct_1d_14_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_14_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_14_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_14_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_14_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_14_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_14_mux_flush[i] = dct_2d_2_dct_1d_14_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_14_assign_array_14_assign_216_a = dct_2d_2_dct_1d_14_output_sigs[0];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_217_a = dct_2d_2_dct_1d_14_output_sigs[1];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_218_a = dct_2d_2_dct_1d_14_output_sigs[2];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_219_a = dct_2d_2_dct_1d_14_output_sigs[3];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_220_a = dct_2d_2_dct_1d_14_output_sigs[4];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_221_a = dct_2d_2_dct_1d_14_output_sigs[5];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_222_a = dct_2d_2_dct_1d_14_output_sigs[6];



assign dct_2d_2_dct_1d_14_assign_array_14_assign_223_a = dct_2d_2_dct_1d_14_output_sigs[7];



assign dct_2d_2_dct_1d_14_input_interface_data_in = dct_2d_2_assign_224_b;



assign dct_2d_2_dct_1d_14_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[3] = dct_2d_2_dct_1d_14_assign_array_14_assign_216_a;



assign cbf_out_sigs[11] = dct_2d_2_dct_1d_14_assign_array_14_assign_217_a;



assign cbf_out_sigs[19] = dct_2d_2_dct_1d_14_assign_array_14_assign_218_a;



assign cbf_out_sigs[27] = dct_2d_2_dct_1d_14_assign_array_14_assign_219_a;



assign cbf_out_sigs[35] = dct_2d_2_dct_1d_14_assign_array_14_assign_220_a;



assign cbf_out_sigs[43] = dct_2d_2_dct_1d_14_assign_array_14_assign_221_a;



assign cbf_out_sigs[51] = dct_2d_2_dct_1d_14_assign_array_14_assign_222_a;



assign cbf_out_sigs[59] = dct_2d_2_dct_1d_14_assign_array_14_assign_223_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_15_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_15_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_15_input_interface_data_valid) begin
            dct_2d_2_dct_1d_15_data_in_reg <= dct_2d_2_dct_1d_15_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_15_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_15_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_15_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_15_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_15_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_15_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_15_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_15_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_15_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_15_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_15_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_15_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_15_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_15_first_row_passed <= 0;
        dct_2d_2_dct_1d_15_cycles_counter <= 0;
        dct_2d_2_dct_1d_15_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_15_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_15_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_15_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_15_first_row_passed))) begin
                dct_2d_2_dct_1d_15_cycles_counter <= 0;
                dct_2d_2_dct_1d_15_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_15_cycles_counter <= (dct_2d_2_dct_1d_15_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_15_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_15_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_15_inputs_counter <= (dct_2d_2_dct_1d_15_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_15_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_15_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_15_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_15_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_15_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_15_mult_reg[i] <= (dct_2d_2_dct_1d_15_data_in_reg * dct_2d_2_dct_1d_15_coeffs[i]);
                dct_2d_2_dct_1d_15_adder_reg[i] <= (dct_2d_2_dct_1d_15_mux_flush[i] + dct_2d_2_dct_1d_15_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_15_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_15_coeffs[0] <= 0;
        dct_2d_2_dct_1d_15_coeffs[1] <= 0;
        dct_2d_2_dct_1d_15_coeffs[2] <= 0;
        dct_2d_2_dct_1d_15_coeffs[3] <= 0;
        dct_2d_2_dct_1d_15_coeffs[4] <= 0;
        dct_2d_2_dct_1d_15_coeffs[5] <= 0;
        dct_2d_2_dct_1d_15_coeffs[6] <= 0;
        dct_2d_2_dct_1d_15_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_15_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_15_inputs_counter))
                    0: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_15_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_15_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_15_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_15_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_15_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_15_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_15_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_15_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_15_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_15_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_15_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_15_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_15_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_15_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_15_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_15_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_15_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_15_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_15_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_15_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_15_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_15_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_15_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_15_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_15_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_15_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_15_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_15_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_15_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_15_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_15_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_15_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_15_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_15_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_15_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_15_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_15_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_15_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_15_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_15_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_15_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_15_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_15_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_15_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_15_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_15_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_15_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_15_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_15_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_15_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_15_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_15_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_15_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_15_first_row_passed, dct_2d_2_dct_1d_15_cycles_counter, dct_2d_2_dct_1d_15_adder_reg[0], dct_2d_2_dct_1d_15_adder_reg[1], dct_2d_2_dct_1d_15_adder_reg[2], dct_2d_2_dct_1d_15_adder_reg[3], dct_2d_2_dct_1d_15_adder_reg[4], dct_2d_2_dct_1d_15_adder_reg[5], dct_2d_2_dct_1d_15_adder_reg[6], dct_2d_2_dct_1d_15_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_15_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_15_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_15_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_15_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_15_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_15_mux_flush[i] = dct_2d_2_dct_1d_15_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_15_assign_array_15_assign_234_a = dct_2d_2_dct_1d_15_output_sigs[0];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_235_a = dct_2d_2_dct_1d_15_output_sigs[1];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_236_a = dct_2d_2_dct_1d_15_output_sigs[2];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_237_a = dct_2d_2_dct_1d_15_output_sigs[3];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_238_a = dct_2d_2_dct_1d_15_output_sigs[4];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_239_a = dct_2d_2_dct_1d_15_output_sigs[5];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_240_a = dct_2d_2_dct_1d_15_output_sigs[6];



assign dct_2d_2_dct_1d_15_assign_array_15_assign_241_a = dct_2d_2_dct_1d_15_output_sigs[7];



assign dct_2d_2_dct_1d_15_input_interface_data_in = dct_2d_2_assign_242_b;



assign dct_2d_2_dct_1d_15_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[4] = dct_2d_2_dct_1d_15_assign_array_15_assign_234_a;



assign cbf_out_sigs[12] = dct_2d_2_dct_1d_15_assign_array_15_assign_235_a;



assign cbf_out_sigs[20] = dct_2d_2_dct_1d_15_assign_array_15_assign_236_a;



assign cbf_out_sigs[28] = dct_2d_2_dct_1d_15_assign_array_15_assign_237_a;



assign cbf_out_sigs[36] = dct_2d_2_dct_1d_15_assign_array_15_assign_238_a;



assign cbf_out_sigs[44] = dct_2d_2_dct_1d_15_assign_array_15_assign_239_a;



assign cbf_out_sigs[52] = dct_2d_2_dct_1d_15_assign_array_15_assign_240_a;



assign cbf_out_sigs[60] = dct_2d_2_dct_1d_15_assign_array_15_assign_241_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_16_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_16_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_16_input_interface_data_valid) begin
            dct_2d_2_dct_1d_16_data_in_reg <= dct_2d_2_dct_1d_16_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_16_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_16_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_16_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_16_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_16_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_16_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_16_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_16_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_16_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_16_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_16_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_16_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_16_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_16_first_row_passed <= 0;
        dct_2d_2_dct_1d_16_cycles_counter <= 0;
        dct_2d_2_dct_1d_16_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_16_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_16_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_16_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_16_first_row_passed))) begin
                dct_2d_2_dct_1d_16_cycles_counter <= 0;
                dct_2d_2_dct_1d_16_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_16_cycles_counter <= (dct_2d_2_dct_1d_16_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_16_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_16_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_16_inputs_counter <= (dct_2d_2_dct_1d_16_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_16_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_16_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_16_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_16_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_16_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_16_mult_reg[i] <= (dct_2d_2_dct_1d_16_data_in_reg * dct_2d_2_dct_1d_16_coeffs[i]);
                dct_2d_2_dct_1d_16_adder_reg[i] <= (dct_2d_2_dct_1d_16_mux_flush[i] + dct_2d_2_dct_1d_16_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_16_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_16_coeffs[0] <= 0;
        dct_2d_2_dct_1d_16_coeffs[1] <= 0;
        dct_2d_2_dct_1d_16_coeffs[2] <= 0;
        dct_2d_2_dct_1d_16_coeffs[3] <= 0;
        dct_2d_2_dct_1d_16_coeffs[4] <= 0;
        dct_2d_2_dct_1d_16_coeffs[5] <= 0;
        dct_2d_2_dct_1d_16_coeffs[6] <= 0;
        dct_2d_2_dct_1d_16_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_16_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_16_inputs_counter))
                    0: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_16_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_16_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_16_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_16_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_16_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_16_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_16_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_16_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_16_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_16_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_16_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_16_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_16_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_16_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_16_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_16_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_16_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_16_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_16_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_16_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_16_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_16_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_16_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_16_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_16_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_16_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_16_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_16_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_16_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_16_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_16_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_16_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_16_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_16_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_16_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_16_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_16_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_16_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_16_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_16_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_16_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_16_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_16_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_16_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_16_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_16_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_16_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_16_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_16_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_16_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_16_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_16_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_16_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_16_first_row_passed, dct_2d_2_dct_1d_16_cycles_counter, dct_2d_2_dct_1d_16_adder_reg[0], dct_2d_2_dct_1d_16_adder_reg[1], dct_2d_2_dct_1d_16_adder_reg[2], dct_2d_2_dct_1d_16_adder_reg[3], dct_2d_2_dct_1d_16_adder_reg[4], dct_2d_2_dct_1d_16_adder_reg[5], dct_2d_2_dct_1d_16_adder_reg[6], dct_2d_2_dct_1d_16_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_16_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_16_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_16_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_16_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_16_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_16_mux_flush[i] = dct_2d_2_dct_1d_16_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_16_assign_array_16_assign_252_a = dct_2d_2_dct_1d_16_output_sigs[0];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_253_a = dct_2d_2_dct_1d_16_output_sigs[1];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_254_a = dct_2d_2_dct_1d_16_output_sigs[2];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_255_a = dct_2d_2_dct_1d_16_output_sigs[3];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_256_a = dct_2d_2_dct_1d_16_output_sigs[4];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_257_a = dct_2d_2_dct_1d_16_output_sigs[5];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_258_a = dct_2d_2_dct_1d_16_output_sigs[6];



assign dct_2d_2_dct_1d_16_assign_array_16_assign_259_a = dct_2d_2_dct_1d_16_output_sigs[7];



assign dct_2d_2_dct_1d_16_input_interface_data_in = dct_2d_2_assign_260_b;



assign dct_2d_2_dct_1d_16_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[5] = dct_2d_2_dct_1d_16_assign_array_16_assign_252_a;



assign cbf_out_sigs[13] = dct_2d_2_dct_1d_16_assign_array_16_assign_253_a;



assign cbf_out_sigs[21] = dct_2d_2_dct_1d_16_assign_array_16_assign_254_a;



assign cbf_out_sigs[29] = dct_2d_2_dct_1d_16_assign_array_16_assign_255_a;



assign cbf_out_sigs[37] = dct_2d_2_dct_1d_16_assign_array_16_assign_256_a;



assign cbf_out_sigs[45] = dct_2d_2_dct_1d_16_assign_array_16_assign_257_a;



assign cbf_out_sigs[53] = dct_2d_2_dct_1d_16_assign_array_16_assign_258_a;



assign cbf_out_sigs[61] = dct_2d_2_dct_1d_16_assign_array_16_assign_259_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_17_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_17_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_17_input_interface_data_valid) begin
            dct_2d_2_dct_1d_17_data_in_reg <= dct_2d_2_dct_1d_17_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_17_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_17_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_17_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_17_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_17_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_17_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_17_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_17_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_17_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_17_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_17_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_17_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_17_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_17_first_row_passed <= 0;
        dct_2d_2_dct_1d_17_cycles_counter <= 0;
        dct_2d_2_dct_1d_17_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_17_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_17_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_17_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_17_first_row_passed))) begin
                dct_2d_2_dct_1d_17_cycles_counter <= 0;
                dct_2d_2_dct_1d_17_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_17_cycles_counter <= (dct_2d_2_dct_1d_17_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_17_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_17_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_17_inputs_counter <= (dct_2d_2_dct_1d_17_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_17_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_17_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_17_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_17_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_17_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_17_mult_reg[i] <= (dct_2d_2_dct_1d_17_data_in_reg * dct_2d_2_dct_1d_17_coeffs[i]);
                dct_2d_2_dct_1d_17_adder_reg[i] <= (dct_2d_2_dct_1d_17_mux_flush[i] + dct_2d_2_dct_1d_17_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_17_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_17_coeffs[0] <= 0;
        dct_2d_2_dct_1d_17_coeffs[1] <= 0;
        dct_2d_2_dct_1d_17_coeffs[2] <= 0;
        dct_2d_2_dct_1d_17_coeffs[3] <= 0;
        dct_2d_2_dct_1d_17_coeffs[4] <= 0;
        dct_2d_2_dct_1d_17_coeffs[5] <= 0;
        dct_2d_2_dct_1d_17_coeffs[6] <= 0;
        dct_2d_2_dct_1d_17_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_17_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_17_inputs_counter))
                    0: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_17_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_17_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_17_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_17_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_17_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_17_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_17_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_17_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_17_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_17_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_17_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_17_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_17_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_17_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_17_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_17_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_17_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_17_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_17_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_17_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_17_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_17_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_17_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_17_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_17_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_17_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_17_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_17_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_17_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_17_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_17_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_17_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_17_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_17_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_17_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_17_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_17_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_17_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_17_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_17_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_17_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_17_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_17_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_17_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_17_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_17_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_17_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_17_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_17_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_17_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_17_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_17_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_17_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_17_first_row_passed, dct_2d_2_dct_1d_17_cycles_counter, dct_2d_2_dct_1d_17_adder_reg[0], dct_2d_2_dct_1d_17_adder_reg[1], dct_2d_2_dct_1d_17_adder_reg[2], dct_2d_2_dct_1d_17_adder_reg[3], dct_2d_2_dct_1d_17_adder_reg[4], dct_2d_2_dct_1d_17_adder_reg[5], dct_2d_2_dct_1d_17_adder_reg[6], dct_2d_2_dct_1d_17_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_17_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_17_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_17_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_17_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_17_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_17_mux_flush[i] = dct_2d_2_dct_1d_17_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_17_assign_array_17_assign_270_a = dct_2d_2_dct_1d_17_output_sigs[0];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_271_a = dct_2d_2_dct_1d_17_output_sigs[1];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_272_a = dct_2d_2_dct_1d_17_output_sigs[2];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_273_a = dct_2d_2_dct_1d_17_output_sigs[3];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_274_a = dct_2d_2_dct_1d_17_output_sigs[4];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_275_a = dct_2d_2_dct_1d_17_output_sigs[5];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_276_a = dct_2d_2_dct_1d_17_output_sigs[6];



assign dct_2d_2_dct_1d_17_assign_array_17_assign_277_a = dct_2d_2_dct_1d_17_output_sigs[7];



assign dct_2d_2_dct_1d_17_input_interface_data_in = dct_2d_2_assign_278_b;



assign dct_2d_2_dct_1d_17_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[6] = dct_2d_2_dct_1d_17_assign_array_17_assign_270_a;



assign cbf_out_sigs[14] = dct_2d_2_dct_1d_17_assign_array_17_assign_271_a;



assign cbf_out_sigs[22] = dct_2d_2_dct_1d_17_assign_array_17_assign_272_a;



assign cbf_out_sigs[30] = dct_2d_2_dct_1d_17_assign_array_17_assign_273_a;



assign cbf_out_sigs[38] = dct_2d_2_dct_1d_17_assign_array_17_assign_274_a;



assign cbf_out_sigs[46] = dct_2d_2_dct_1d_17_assign_array_17_assign_275_a;



assign cbf_out_sigs[54] = dct_2d_2_dct_1d_17_assign_array_17_assign_276_a;



assign cbf_out_sigs[62] = dct_2d_2_dct_1d_17_assign_array_17_assign_277_a;

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_18_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_18_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_18_input_interface_data_valid) begin
            dct_2d_2_dct_1d_18_data_in_reg <= dct_2d_2_dct_1d_18_input_interface_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_18_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_18_output_interface_data_valid <= 0;
        dct_2d_2_dct_1d_18_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_18_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_18_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_18_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_18_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_18_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_18_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_18_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_dct_1d_18_output_interface_data_valid <= 1'b1;
        end
        else begin
            dct_2d_2_dct_1d_18_output_interface_data_valid <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_18_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_18_first_row_passed <= 0;
        dct_2d_2_dct_1d_18_cycles_counter <= 0;
        dct_2d_2_dct_1d_18_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_18_input_interface_data_valid) begin
            if (((dct_2d_2_dct_1d_18_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_18_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_18_first_row_passed))) begin
                dct_2d_2_dct_1d_18_cycles_counter <= 0;
                dct_2d_2_dct_1d_18_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_18_cycles_counter <= (dct_2d_2_dct_1d_18_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_18_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_18_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_18_inputs_counter <= (dct_2d_2_dct_1d_18_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_18_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_18_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_18_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_18_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_18_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_18_mult_reg[i] <= (dct_2d_2_dct_1d_18_data_in_reg * dct_2d_2_dct_1d_18_coeffs[i]);
                dct_2d_2_dct_1d_18_adder_reg[i] <= (dct_2d_2_dct_1d_18_mux_flush[i] + dct_2d_2_dct_1d_18_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_18_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_18_coeffs[0] <= 0;
        dct_2d_2_dct_1d_18_coeffs[1] <= 0;
        dct_2d_2_dct_1d_18_coeffs[2] <= 0;
        dct_2d_2_dct_1d_18_coeffs[3] <= 0;
        dct_2d_2_dct_1d_18_coeffs[4] <= 0;
        dct_2d_2_dct_1d_18_coeffs[5] <= 0;
        dct_2d_2_dct_1d_18_coeffs[6] <= 0;
        dct_2d_2_dct_1d_18_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_dct_1d_18_input_interface_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_18_inputs_counter))
                    0: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_18_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_18_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_18_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_18_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_18_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_18_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_18_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_18_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_18_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_18_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_18_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_18_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_18_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_18_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_18_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_18_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_18_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_18_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_18_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_18_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_18_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_18_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_18_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_18_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_18_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_18_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_18_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_18_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_18_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_18_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_18_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_18_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_18_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_18_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_18_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_18_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_18_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_18_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_18_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_18_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_18_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_18_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_18_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_18_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_18_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_18_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_18_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_18_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_18_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_18_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_18_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_18_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_18_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_18_first_row_passed, dct_2d_2_dct_1d_18_cycles_counter, dct_2d_2_dct_1d_18_adder_reg[0], dct_2d_2_dct_1d_18_adder_reg[1], dct_2d_2_dct_1d_18_adder_reg[2], dct_2d_2_dct_1d_18_adder_reg[3], dct_2d_2_dct_1d_18_adder_reg[4], dct_2d_2_dct_1d_18_adder_reg[5], dct_2d_2_dct_1d_18_adder_reg[6], dct_2d_2_dct_1d_18_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_18_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_18_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_18_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_18_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_18_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_18_mux_flush[i] = dct_2d_2_dct_1d_18_adder_reg[i];
        end
    end
end



assign dct_2d_2_dct_1d_18_assign_array_18_assign_288_a = dct_2d_2_dct_1d_18_output_sigs[0];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_289_a = dct_2d_2_dct_1d_18_output_sigs[1];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_290_a = dct_2d_2_dct_1d_18_output_sigs[2];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_291_a = dct_2d_2_dct_1d_18_output_sigs[3];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_292_a = dct_2d_2_dct_1d_18_output_sigs[4];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_293_a = dct_2d_2_dct_1d_18_output_sigs[5];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_294_a = dct_2d_2_dct_1d_18_output_sigs[6];



assign dct_2d_2_dct_1d_18_assign_array_18_assign_295_a = dct_2d_2_dct_1d_18_output_sigs[7];



assign dct_2d_2_dct_1d_18_input_interface_data_in = dct_2d_2_assign_296_b;



assign dct_2d_2_dct_1d_18_input_interface_data_valid = dct_2d_2_assign_171_b;



assign cbf_out_sigs[7] = dct_2d_2_dct_1d_18_assign_array_18_assign_288_a;



assign cbf_out_sigs[15] = dct_2d_2_dct_1d_18_assign_array_18_assign_289_a;



assign cbf_out_sigs[23] = dct_2d_2_dct_1d_18_assign_array_18_assign_290_a;



assign cbf_out_sigs[31] = dct_2d_2_dct_1d_18_assign_array_18_assign_291_a;



assign cbf_out_sigs[39] = dct_2d_2_dct_1d_18_assign_array_18_assign_292_a;



assign cbf_out_sigs[47] = dct_2d_2_dct_1d_18_assign_array_18_assign_293_a;



assign cbf_out_sigs[55] = dct_2d_2_dct_1d_18_assign_array_18_assign_294_a;



assign cbf_out_sigs[63] = dct_2d_2_dct_1d_18_assign_array_18_assign_295_a;



assign dct_2d_2_outputs_data_valid = dct_2d_2_dct_1d_11_output_interface_data_valid;

// Align to zero each input
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_INPUT_SUBTRACT
    if (reset == 0) begin
        dct_2d_2_input_1d_stage_1_data_in <= 0;
        dct_2d_2_data_valid_reg <= 0;
        dct_2d_2_input_1d_stage_1_data_valid <= 0;
        dct_2d_2_data_in_signed <= 0;
    end
    else begin
        if (cb_data_valid) begin
            dct_2d_2_data_in_signed <= cb_data_in;
            dct_2d_2_input_1d_stage_1_data_in <= (dct_2d_2_data_in_signed - 128);
            dct_2d_2_data_valid_reg <= cb_data_valid;
            dct_2d_2_input_1d_stage_1_data_valid <= dct_2d_2_data_valid_reg;
        end
    end
end



assign cbf_data_valid = dct_2d_2_data_valid_reg2;

// Counter update
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_COUNTER_UPDATE
    if (reset == 0) begin
        dct_2d_2_counter <= 0;
    end
    else begin
        if (dct_2d_2_outputs_data_valid) begin
            if (($signed({1'b0, dct_2d_2_counter}) == (8 - 1))) begin
                dct_2d_2_counter <= 0;
            end
            else begin
                dct_2d_2_counter <= (dct_2d_2_counter + 1);
            end
        end
    end
end

// Data valid signal assignment when the outputs are valid
always @(dct_2d_2_outputs_data_valid, dct_2d_2_counter) begin: ZYBO_DCT_2D_2_DATA_VALID_2D
    if ((dct_2d_2_outputs_data_valid && (dct_2d_2_counter == 0))) begin
        dct_2d_2_data_valid_reg2 = 1'b1;
    end
    else begin
        dct_2d_2_data_valid_reg2 = 1'b0;
    end
end

// input register
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_10_INPUT_REG
    if (reset == 0) begin
        dct_2d_2_dct_1d_10_data_in_reg <= 0;
    end
    else begin
        if (dct_2d_2_input_1d_stage_1_data_valid) begin
            dct_2d_2_dct_1d_10_data_in_reg <= dct_2d_2_input_1d_stage_1_data_in;
        end
    end
end

// rounding
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_10_OUTPUTS
    integer i;
    if (reset == 0) begin
        dct_2d_2_assign_171_b <= 0;
        dct_2d_2_dct_1d_10_output_sigs[0] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[1] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[2] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[3] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[4] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[5] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[6] <= 0;
        dct_2d_2_dct_1d_10_output_sigs[7] <= 0;
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_10_output_sigs[i] <= ($signed(dct_2d_2_dct_1d_10_adder_reg[i][25-1:14]) + dct_2d_2_dct_1d_10_adder_reg[i][13]);
        end
        if (((dct_2d_2_dct_1d_10_cycles_counter == (8 + 2)) || (dct_2d_2_dct_1d_10_first_row_passed && ($signed({1'b0, dct_2d_2_dct_1d_10_cycles_counter}) == (8 - 1))))) begin
            dct_2d_2_assign_171_b <= 1'b1;
        end
        else begin
            dct_2d_2_assign_171_b <= 1'b0;
        end
    end
end

// inputs and cycles counter
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_10_COUNTERS
    if (reset == 0) begin
        dct_2d_2_dct_1d_10_first_row_passed <= 0;
        dct_2d_2_dct_1d_10_cycles_counter <= 0;
        dct_2d_2_dct_1d_10_inputs_counter <= 0;
    end
    else begin
        if (dct_2d_2_input_1d_stage_1_data_valid) begin
            if (((dct_2d_2_dct_1d_10_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_10_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_10_first_row_passed))) begin
                dct_2d_2_dct_1d_10_cycles_counter <= 0;
                dct_2d_2_dct_1d_10_first_row_passed <= 1'b1;
            end
            else begin
                dct_2d_2_dct_1d_10_cycles_counter <= (dct_2d_2_dct_1d_10_cycles_counter + 1);
            end
            if (($signed({1'b0, dct_2d_2_dct_1d_10_inputs_counter}) == (8 - 1))) begin
                dct_2d_2_dct_1d_10_inputs_counter <= 0;
            end
            else begin
                dct_2d_2_dct_1d_10_inputs_counter <= (dct_2d_2_dct_1d_10_inputs_counter + 1);
            end
        end
    end
end

// multiplication and addition
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_10_MUL_ADD
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_10_adder_reg[0] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[1] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[2] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[3] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[4] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[5] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[6] <= 0;
        dct_2d_2_dct_1d_10_adder_reg[7] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[0] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[1] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[2] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[3] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[4] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[5] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[6] <= 0;
        dct_2d_2_dct_1d_10_mult_reg[7] <= 0;
    end
    else begin
        if (dct_2d_2_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                dct_2d_2_dct_1d_10_mult_reg[i] <= (dct_2d_2_dct_1d_10_data_in_reg * dct_2d_2_dct_1d_10_coeffs[i]);
                dct_2d_2_dct_1d_10_adder_reg[i] <= (dct_2d_2_dct_1d_10_mux_flush[i] + dct_2d_2_dct_1d_10_mult_reg[i]);
            end
        end
    end
end

// coefficient assignment from rom
always @(posedge clock, negedge reset) begin: ZYBO_DCT_2D_2_DCT_1D_10_COEFF_ASSIGN
    integer i;
    if (reset == 0) begin
        dct_2d_2_dct_1d_10_coeffs[0] <= 0;
        dct_2d_2_dct_1d_10_coeffs[1] <= 0;
        dct_2d_2_dct_1d_10_coeffs[2] <= 0;
        dct_2d_2_dct_1d_10_coeffs[3] <= 0;
        dct_2d_2_dct_1d_10_coeffs[4] <= 0;
        dct_2d_2_dct_1d_10_coeffs[5] <= 0;
        dct_2d_2_dct_1d_10_coeffs[6] <= 0;
        dct_2d_2_dct_1d_10_coeffs[7] <= 0;
    end
    else begin
        if (dct_2d_2_input_1d_stage_1_data_valid) begin
            for (i=0; i<8; i=i+1) begin
                case (((i * 8) + dct_2d_2_dct_1d_10_inputs_counter))
                    0: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    1: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    2: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    3: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    4: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    5: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    6: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    7: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    8: dct_2d_2_dct_1d_10_coeffs[i] <= 8035;
                    9: dct_2d_2_dct_1d_10_coeffs[i] <= 6811;
                    10: dct_2d_2_dct_1d_10_coeffs[i] <= 4551;
                    11: dct_2d_2_dct_1d_10_coeffs[i] <= 1598;
                    12: dct_2d_2_dct_1d_10_coeffs[i] <= (-1598);
                    13: dct_2d_2_dct_1d_10_coeffs[i] <= (-4551);
                    14: dct_2d_2_dct_1d_10_coeffs[i] <= (-6811);
                    15: dct_2d_2_dct_1d_10_coeffs[i] <= (-8035);
                    16: dct_2d_2_dct_1d_10_coeffs[i] <= 7568;
                    17: dct_2d_2_dct_1d_10_coeffs[i] <= 3135;
                    18: dct_2d_2_dct_1d_10_coeffs[i] <= (-3135);
                    19: dct_2d_2_dct_1d_10_coeffs[i] <= (-7568);
                    20: dct_2d_2_dct_1d_10_coeffs[i] <= (-7568);
                    21: dct_2d_2_dct_1d_10_coeffs[i] <= (-3135);
                    22: dct_2d_2_dct_1d_10_coeffs[i] <= 3135;
                    23: dct_2d_2_dct_1d_10_coeffs[i] <= 7568;
                    24: dct_2d_2_dct_1d_10_coeffs[i] <= 6811;
                    25: dct_2d_2_dct_1d_10_coeffs[i] <= (-1598);
                    26: dct_2d_2_dct_1d_10_coeffs[i] <= (-8035);
                    27: dct_2d_2_dct_1d_10_coeffs[i] <= (-4551);
                    28: dct_2d_2_dct_1d_10_coeffs[i] <= 4551;
                    29: dct_2d_2_dct_1d_10_coeffs[i] <= 8035;
                    30: dct_2d_2_dct_1d_10_coeffs[i] <= 1598;
                    31: dct_2d_2_dct_1d_10_coeffs[i] <= (-6811);
                    32: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    33: dct_2d_2_dct_1d_10_coeffs[i] <= (-5793);
                    34: dct_2d_2_dct_1d_10_coeffs[i] <= (-5793);
                    35: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    36: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    37: dct_2d_2_dct_1d_10_coeffs[i] <= (-5793);
                    38: dct_2d_2_dct_1d_10_coeffs[i] <= (-5793);
                    39: dct_2d_2_dct_1d_10_coeffs[i] <= 5793;
                    40: dct_2d_2_dct_1d_10_coeffs[i] <= 4551;
                    41: dct_2d_2_dct_1d_10_coeffs[i] <= (-8035);
                    42: dct_2d_2_dct_1d_10_coeffs[i] <= 1598;
                    43: dct_2d_2_dct_1d_10_coeffs[i] <= 6811;
                    44: dct_2d_2_dct_1d_10_coeffs[i] <= (-6811);
                    45: dct_2d_2_dct_1d_10_coeffs[i] <= (-1598);
                    46: dct_2d_2_dct_1d_10_coeffs[i] <= 8035;
                    47: dct_2d_2_dct_1d_10_coeffs[i] <= (-4551);
                    48: dct_2d_2_dct_1d_10_coeffs[i] <= 3135;
                    49: dct_2d_2_dct_1d_10_coeffs[i] <= (-7568);
                    50: dct_2d_2_dct_1d_10_coeffs[i] <= 7568;
                    51: dct_2d_2_dct_1d_10_coeffs[i] <= (-3135);
                    52: dct_2d_2_dct_1d_10_coeffs[i] <= (-3135);
                    53: dct_2d_2_dct_1d_10_coeffs[i] <= 7568;
                    54: dct_2d_2_dct_1d_10_coeffs[i] <= (-7568);
                    55: dct_2d_2_dct_1d_10_coeffs[i] <= 3135;
                    56: dct_2d_2_dct_1d_10_coeffs[i] <= 1598;
                    57: dct_2d_2_dct_1d_10_coeffs[i] <= (-4551);
                    58: dct_2d_2_dct_1d_10_coeffs[i] <= 6811;
                    59: dct_2d_2_dct_1d_10_coeffs[i] <= (-8035);
                    60: dct_2d_2_dct_1d_10_coeffs[i] <= 8035;
                    61: dct_2d_2_dct_1d_10_coeffs[i] <= (-6811);
                    62: dct_2d_2_dct_1d_10_coeffs[i] <= 4551;
                    default: dct_2d_2_dct_1d_10_coeffs[i] <= (-1598);
                endcase
            end
        end
    end
end

// after 8 inputs flush one of the inputs of the adder
always @(dct_2d_2_dct_1d_10_first_row_passed, dct_2d_2_dct_1d_10_cycles_counter, dct_2d_2_dct_1d_10_adder_reg[0], dct_2d_2_dct_1d_10_adder_reg[1], dct_2d_2_dct_1d_10_adder_reg[2], dct_2d_2_dct_1d_10_adder_reg[3], dct_2d_2_dct_1d_10_adder_reg[4], dct_2d_2_dct_1d_10_adder_reg[5], dct_2d_2_dct_1d_10_adder_reg[6], dct_2d_2_dct_1d_10_adder_reg[7]) begin: ZYBO_DCT_2D_2_DCT_1D_10_MUX_AFTER_ADDER_REG
    integer i;
    if (((dct_2d_2_dct_1d_10_cycles_counter == (8 + 2)) || (($signed({1'b0, dct_2d_2_dct_1d_10_cycles_counter}) == (8 - 1)) && dct_2d_2_dct_1d_10_first_row_passed))) begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_10_mux_flush[i] = 0;
        end
    end
    else begin
        for (i=0; i<8; i=i+1) begin
            dct_2d_2_dct_1d_10_mux_flush[i] = dct_2d_2_dct_1d_10_adder_reg[i];
        end
    end
end



assign dct_2d_2_assign_170_b = dct_2d_2_dct_1d_10_output_sigs[0];



assign dct_2d_2_assign_188_b = dct_2d_2_dct_1d_10_output_sigs[1];



assign dct_2d_2_assign_206_b = dct_2d_2_dct_1d_10_output_sigs[2];



assign dct_2d_2_assign_224_b = dct_2d_2_dct_1d_10_output_sigs[3];



assign dct_2d_2_assign_242_b = dct_2d_2_dct_1d_10_output_sigs[4];



assign dct_2d_2_assign_260_b = dct_2d_2_dct_1d_10_output_sigs[5];



assign dct_2d_2_assign_278_b = dct_2d_2_dct_1d_10_output_sigs[6];



assign dct_2d_2_assign_296_b = dct_2d_2_dct_1d_10_output_sigs[7];

endmodule
