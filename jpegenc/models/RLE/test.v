// File: test.v
// Generated by MyHDL 1.0dev
// Date: Fri May 27 03:58:06 2016


`timescale 1ns/10ps

module test (

);



reg wren;
reg rd_req;
reg clk;
wire [19:0] data_out;
reg [19:0] data_in;
reg buf_sel;
wire fifo_empty;
reg reset;
wire [19:0] rledoublefifo_1_fbus2_read_data;
reg rledoublefifo_1_fbus2_write;
reg rledoublefifo_1_fbus1_write;
wire rledoublefifo_1_fbus1_read;
wire [19:0] rledoublefifo_1_fbus2_write_data;
wire [19:0] rledoublefifo_1_fbus1_read_data;
reg rledoublefifo_1_fbus2_empty;
reg [19:0] rledoublefifo_1_fifo_data_in;
wire [19:0] rledoublefifo_1_fbus1_write_data;
reg rledoublefifo_1_fbus1_empty;
wire rledoublefifo_1_fbus2_read;
reg [5:0] rledoublefifo_1_fifo_sync_2_rptr;
reg rledoublefifo_1_fifo_sync_2_vld;
wire rledoublefifo_1_fifo_sync_2_fbus_read_valid;
wire rledoublefifo_1_fifo_sync_2_fbus_clear;
reg [6:0] rledoublefifo_1_fifo_sync_2_ntenant;
reg rledoublefifo_1_fifo_sync_2_fbus_full;
reg [6:0] rledoublefifo_1_fifo_sync_2_nvacant;
reg [5:0] rledoublefifo_1_fifo_sync_2_wptr;
reg [5:0] rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__addr_w;
reg rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__wr;
reg [19:0] rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__dout;
reg [19:0] rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__din;
reg [5:0] rledoublefifo_1_fifo_sync_3_rptr;
reg rledoublefifo_1_fifo_sync_3_vld;
wire rledoublefifo_1_fifo_sync_3_fbus_read_valid;
wire rledoublefifo_1_fifo_sync_3_fbus_clear;
reg [6:0] rledoublefifo_1_fifo_sync_3_ntenant;
reg rledoublefifo_1_fifo_sync_3_fbus_full;
reg [6:0] rledoublefifo_1_fifo_sync_3_nvacant;
reg [5:0] rledoublefifo_1_fifo_sync_3_wptr;
reg [5:0] rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__addr_w;
reg rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__wr;
reg [19:0] rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__dout;
reg [19:0] rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__din;

reg [19:0] rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2_mem [0:64-1];
reg [19:0] rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3_mem [0:64-1];

assign rledoublefifo_1_fifo_sync_2_fbus_clear = 1'd0;
assign rledoublefifo_1_fifo_sync_3_fbus_clear = 1'd0;




assign rledoublefifo_1_fbus1_read_data = rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__dout;


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_RD
    rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__dout <= rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2_mem[rledoublefifo_1_fifo_sync_2_rptr];
end


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_WR
    rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__wr <= rledoublefifo_1_fbus1_write;
    rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__addr_w <= rledoublefifo_1_fifo_sync_2_wptr;
    rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__din <= rledoublefifo_1_fbus1_write_data;
end


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_MEM
    if (rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__wr) begin
        rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2_mem[rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__addr_w] <= rledoublefifo_1_fifo_sync_2_fifo_mem_generic_2__din;
    end
end


always @(posedge clk, posedge reset) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_2_BEH_FIFO
    if (reset == 1) begin
        rledoublefifo_1_fifo_sync_2_rptr <= 00;
        rledoublefifo_1_fbus1_empty <= 1;
        rledoublefifo_1_fifo_sync_2_fbus_full <= 0;
        rledoublefifo_1_fifo_sync_2_vld <= 0;
        rledoublefifo_1_fifo_sync_2_wptr <= 00;
    end
    else begin
        if (rledoublefifo_1_fifo_sync_2_fbus_clear) begin
            rledoublefifo_1_fifo_sync_2_wptr <= 0;
            rledoublefifo_1_fifo_sync_2_rptr <= 0;
            rledoublefifo_1_fifo_sync_2_fbus_full <= 1'b0;
            rledoublefifo_1_fbus1_empty <= 1'b1;
        end
        else if ((rledoublefifo_1_fbus1_read && (!rledoublefifo_1_fbus1_write))) begin
            rledoublefifo_1_fifo_sync_2_fbus_full <= 1'b0;
            if ((!rledoublefifo_1_fbus1_empty)) begin
                rledoublefifo_1_fifo_sync_2_rptr <= (rledoublefifo_1_fifo_sync_2_rptr + 1);
            end
            if (($signed({1'b0, rledoublefifo_1_fifo_sync_2_rptr}) == ($signed({1'b0, rledoublefifo_1_fifo_sync_2_wptr}) - 1))) begin
                rledoublefifo_1_fbus1_empty <= 1'b1;
            end
        end
        else if ((rledoublefifo_1_fbus1_write && (!rledoublefifo_1_fbus1_read))) begin
            rledoublefifo_1_fbus1_empty <= 1'b0;
            if ((!rledoublefifo_1_fifo_sync_2_fbus_full)) begin
                rledoublefifo_1_fifo_sync_2_wptr <= (rledoublefifo_1_fifo_sync_2_wptr + 1);
            end
            if (($signed({1'b0, rledoublefifo_1_fifo_sync_2_wptr}) == ($signed({1'b0, rledoublefifo_1_fifo_sync_2_rptr}) - 1))) begin
                rledoublefifo_1_fifo_sync_2_fbus_full <= 1'b1;
            end
        end
        else if ((rledoublefifo_1_fbus1_write && rledoublefifo_1_fbus1_read)) begin
            rledoublefifo_1_fifo_sync_2_wptr <= (rledoublefifo_1_fifo_sync_2_wptr + 1);
            rledoublefifo_1_fifo_sync_2_rptr <= (rledoublefifo_1_fifo_sync_2_rptr + 1);
        end
        rledoublefifo_1_fifo_sync_2_vld <= rledoublefifo_1_fbus1_read;
    end
end



assign rledoublefifo_1_fifo_sync_2_fbus_read_valid = (rledoublefifo_1_fifo_sync_2_vld & rledoublefifo_1_fbus1_read);


always @(posedge clk, posedge reset) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_2_DBG_OCCUPANCY
    integer v;
    integer f;
    if (reset == 1) begin
        rledoublefifo_1_fifo_sync_2_ntenant <= 00;
        rledoublefifo_1_fifo_sync_2_nvacant <= 40;
    end
    else begin
        if (rledoublefifo_1_fifo_sync_2_fbus_clear) begin
            rledoublefifo_1_fifo_sync_2_nvacant <= 64;
            rledoublefifo_1_fifo_sync_2_ntenant <= 0;
        end
        else begin
            v = rledoublefifo_1_fifo_sync_2_nvacant;
            f = rledoublefifo_1_fifo_sync_2_ntenant;
            if (rledoublefifo_1_fifo_sync_2_fbus_read_valid) begin
                v = (v + 1);
                f = (f - 1);
            end
            if (rledoublefifo_1_fbus1_write) begin
                v = (v - 1);
                f = (f + 1);
            end
            rledoublefifo_1_fifo_sync_2_nvacant <= v;
            rledoublefifo_1_fifo_sync_2_ntenant <= f;
        end
    end
end



assign rledoublefifo_1_fbus2_read_data = rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__dout;


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_RD
    rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__dout <= rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3_mem[rledoublefifo_1_fifo_sync_3_rptr];
end


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_WR
    rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__wr <= rledoublefifo_1_fbus2_write;
    rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__addr_w <= rledoublefifo_1_fifo_sync_3_wptr;
    rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__din <= rledoublefifo_1_fbus2_write_data;
end


always @(posedge clk) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_MEM
    if (rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__wr) begin
        rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3_mem[rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__addr_w] <= rledoublefifo_1_fifo_sync_3_fifo_mem_generic_3__din;
    end
end


always @(posedge clk, posedge reset) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_3_BEH_FIFO
    if (reset == 1) begin
        rledoublefifo_1_fifo_sync_3_rptr <= 00;
        rledoublefifo_1_fbus2_empty <= 1;
        rledoublefifo_1_fifo_sync_3_fbus_full <= 0;
        rledoublefifo_1_fifo_sync_3_vld <= 0;
        rledoublefifo_1_fifo_sync_3_wptr <= 00;
    end
    else begin
        if (rledoublefifo_1_fifo_sync_3_fbus_clear) begin
            rledoublefifo_1_fifo_sync_3_wptr <= 0;
            rledoublefifo_1_fifo_sync_3_rptr <= 0;
            rledoublefifo_1_fifo_sync_3_fbus_full <= 1'b0;
            rledoublefifo_1_fbus2_empty <= 1'b1;
        end
        else if ((rledoublefifo_1_fbus2_read && (!rledoublefifo_1_fbus2_write))) begin
            rledoublefifo_1_fifo_sync_3_fbus_full <= 1'b0;
            if ((!rledoublefifo_1_fbus2_empty)) begin
                rledoublefifo_1_fifo_sync_3_rptr <= (rledoublefifo_1_fifo_sync_3_rptr + 1);
            end
            if (($signed({1'b0, rledoublefifo_1_fifo_sync_3_rptr}) == ($signed({1'b0, rledoublefifo_1_fifo_sync_3_wptr}) - 1))) begin
                rledoublefifo_1_fbus2_empty <= 1'b1;
            end
        end
        else if ((rledoublefifo_1_fbus2_write && (!rledoublefifo_1_fbus2_read))) begin
            rledoublefifo_1_fbus2_empty <= 1'b0;
            if ((!rledoublefifo_1_fifo_sync_3_fbus_full)) begin
                rledoublefifo_1_fifo_sync_3_wptr <= (rledoublefifo_1_fifo_sync_3_wptr + 1);
            end
            if (($signed({1'b0, rledoublefifo_1_fifo_sync_3_wptr}) == ($signed({1'b0, rledoublefifo_1_fifo_sync_3_rptr}) - 1))) begin
                rledoublefifo_1_fifo_sync_3_fbus_full <= 1'b1;
            end
        end
        else if ((rledoublefifo_1_fbus2_write && rledoublefifo_1_fbus2_read)) begin
            rledoublefifo_1_fifo_sync_3_wptr <= (rledoublefifo_1_fifo_sync_3_wptr + 1);
            rledoublefifo_1_fifo_sync_3_rptr <= (rledoublefifo_1_fifo_sync_3_rptr + 1);
        end
        rledoublefifo_1_fifo_sync_3_vld <= rledoublefifo_1_fbus2_read;
    end
end



assign rledoublefifo_1_fifo_sync_3_fbus_read_valid = (rledoublefifo_1_fifo_sync_3_vld & rledoublefifo_1_fbus2_read);


always @(posedge clk, posedge reset) begin: TEST_RLEDOUBLEFIFO_1_FIFO_SYNC_3_DBG_OCCUPANCY
    integer v;
    integer f;
    if (reset == 1) begin
        rledoublefifo_1_fifo_sync_3_ntenant <= 00;
        rledoublefifo_1_fifo_sync_3_nvacant <= 40;
    end
    else begin
        if (rledoublefifo_1_fifo_sync_3_fbus_clear) begin
            rledoublefifo_1_fifo_sync_3_nvacant <= 64;
            rledoublefifo_1_fifo_sync_3_ntenant <= 0;
        end
        else begin
            v = rledoublefifo_1_fifo_sync_3_nvacant;
            f = rledoublefifo_1_fifo_sync_3_ntenant;
            if (rledoublefifo_1_fifo_sync_3_fbus_read_valid) begin
                v = (v + 1);
                f = (f - 1);
            end
            if (rledoublefifo_1_fbus2_write) begin
                v = (v - 1);
                f = (f + 1);
            end
            rledoublefifo_1_fifo_sync_3_nvacant <= v;
            rledoublefifo_1_fifo_sync_3_ntenant <= f;
        end
    end
end



assign rledoublefifo_1_fbus1_write_data = rledoublefifo_1_fifo_data_in;
assign rledoublefifo_1_fbus2_write_data = rledoublefifo_1_fifo_data_in;


always @(posedge clk, posedge reset) begin: TEST_RLEDOUBLEFIFO_1_MUX2_LOGIC
    if (reset == 1) begin
        rledoublefifo_1_fifo_data_in <= 00000;
        rledoublefifo_1_fbus2_write <= 0;
        rledoublefifo_1_fbus1_write <= 0;
    end
    else begin
        if ((buf_sel == 0)) begin
            rledoublefifo_1_fbus1_write <= wren;
        end
        else begin
            rledoublefifo_1_fbus2_write <= wren;
        end
        rledoublefifo_1_fifo_data_in <= data_in;
    end
end



assign rledoublefifo_1_fbus1_read = (buf_sel == 1) ? rd_req : 0;
assign rledoublefifo_1_fbus2_read = (buf_sel == 0) ? rd_req : 0;
assign data_out = (buf_sel == 1) ? rledoublefifo_1_fbus1_read_data : rledoublefifo_1_fbus2_read_data;
assign fifo_empty = (buf_sel == 1) ? rledoublefifo_1_fbus1_empty : rledoublefifo_1_fbus2_empty;


initial begin: TEST_TBCLK
    clk <= 0;
    while (1'b1) begin
        # 5;
        clk <= (!clk);
    end
end


initial begin: TEST_TBSTIM
    integer ii;
    $write("Start Simulation");
    $write("\n");
    buf_sel <= 1'b0;
    wren <= 1'b0;
    rd_req <= 1'b0;
    reset <= 1'b1;
    # 20;
    reset <= 1'b0;
    @(posedge clk);
    if (fifo_empty !== 1) begin
        $display("*** AssertionError ***");
    end
    buf_sel <= 1'b0;
    @(posedge clk);
    wren <= 1'b1;
    data_in <= 170;
    @(posedge clk);
    wren <= 1'b0;
    @(posedge clk);
    if (fifo_empty !== 1) begin
        $display("*** AssertionError ***");
    end
    wren <= 1'b1;
    data_in <= 161;
    @(posedge clk);
    wren <= 1'b0;
    @(posedge clk);
    if (fifo_empty !== 1) begin
        $display("*** AssertionError ***");
    end
    wren <= 1'b1;
    data_in <= 17;
    @(posedge clk);
    wren <= 1'b0;
    @(posedge clk);
    wren <= 1'b1;
    data_in <= 257;
    @(posedge clk);
    wren <= 1'b0;
    @(posedge clk);
    for (ii=0; ii<64; ii=ii+1) begin
        if ((ii < 28)) begin
            buf_sel <= 1'b0;
            @(posedge clk);
        end
        else begin
            buf_sel <= 1'b1;
            @(posedge clk);
        end
        wren <= 1'b1;
        data_in <= ii;
        @(posedge clk);
        wren <= 1'b0;
        @(posedge clk);
    end
    rd_req <= 1'b1;
    @(posedge clk);
    if ((data_out == 170) !== 1) begin
        $display("*** AssertionError ***");
    end
    rd_req <= 1'b0;
    buf_sel <= 1'b1;
    @(posedge clk);
    rd_req <= 1'b1;
    @(posedge clk);
    if ((data_out == 161) !== 1) begin
        $display("*** AssertionError ***");
    end
    rd_req <= 1'b0;
    buf_sel <= 1'b1;
    @(posedge clk);
    rd_req <= 1'b1;
    @(posedge clk);
    if ((data_out == 17) !== 1) begin
        $display("*** AssertionError ***");
    end
    rd_req <= 1'b0;
    buf_sel <= 1'b1;
    @(posedge clk);
    rd_req <= 1'b1;
    @(posedge clk);
    if ((data_out == 257) !== 1) begin
        $display("*** AssertionError ***");
    end
    rd_req <= 1'b0;
    for (ii=0; ii<64; ii=ii+1) begin
        if ((ii < 28)) begin
            buf_sel <= 1'b1;
            @(posedge clk);
        end
        else begin
            buf_sel <= 1'b0;
            @(posedge clk);
        end
        rd_req <= 1'b1;
        @(posedge clk);
        if (($signed({1'b0, data_out}) == ii) !== 1) begin
            $display("*** AssertionError ***");
        end
        rd_req <= 1'b0;
    end
    @(posedge clk);
    if (fifo_empty !== 1) begin
        $display("*** AssertionError ***");
    end
    $finish;
end

endmodule
