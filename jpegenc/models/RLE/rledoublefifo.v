// File: rledoublefifo.v
// Generated by MyHDL 1.0dev
// Date: Fri May 27 03:58:15 2016


`timescale 1ns/10ps

module rledoublefifo (
    clk,
    reset,
    data_in,
    wren,
    buf_sel,
    rd_req,
    fifo_empty,
    data_out
);


input clk;
input reset;
input [19:0] data_in;
input wren;
input buf_sel;
input rd_req;
output fifo_empty;
wire fifo_empty;
output [19:0] data_out;
wire [19:0] data_out;

wire [19:0] fbus1_write_data;
wire fbus2_read;
wire [19:0] fbus1_read_data;
reg fbus1_write;
reg [19:0] fifo_data_in;
reg fbus2_empty;
wire fbus1_read;
reg fbus2_write;
wire [19:0] fbus2_read_data;
reg fbus1_empty;
wire [19:0] fbus2_write_data;
reg fifo_sync_2_fbus_full;
reg fifo_sync_2_vld;
wire fifo_sync_2_fbus_read_valid;
reg [6:0] fifo_sync_2_nvacant;
reg [5:0] fifo_sync_2_rptr;
reg [6:0] fifo_sync_2_ntenant;
reg [5:0] fifo_sync_2_wptr;
wire fifo_sync_2_fbus_clear;
reg [19:0] fifo_sync_2_fifo_mem_generic_2__dout;
reg [5:0] fifo_sync_2_fifo_mem_generic_2__addr_w;
reg [19:0] fifo_sync_2_fifo_mem_generic_2__din;
reg fifo_sync_2_fifo_mem_generic_2__wr;
reg fifo_sync_3_fbus_full;
reg fifo_sync_3_vld;
wire fifo_sync_3_fbus_read_valid;
reg [6:0] fifo_sync_3_nvacant;
reg [5:0] fifo_sync_3_rptr;
reg [6:0] fifo_sync_3_ntenant;
reg [5:0] fifo_sync_3_wptr;
wire fifo_sync_3_fbus_clear;
reg [19:0] fifo_sync_3_fifo_mem_generic_3__dout;
reg [5:0] fifo_sync_3_fifo_mem_generic_3__addr_w;
reg [19:0] fifo_sync_3_fifo_mem_generic_3__din;
reg fifo_sync_3_fifo_mem_generic_3__wr;

reg [19:0] fifo_sync_2_fifo_mem_generic_2_mem [0:64-1];
reg [19:0] fifo_sync_3_fifo_mem_generic_3_mem [0:64-1];

assign fifo_sync_2_fbus_clear = 1'd0;
assign fifo_sync_3_fbus_clear = 1'd0;




assign fbus1_read_data = fifo_sync_2_fifo_mem_generic_2__dout;


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_RD
    fifo_sync_2_fifo_mem_generic_2__dout <= fifo_sync_2_fifo_mem_generic_2_mem[fifo_sync_2_rptr];
end


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_WR
    fifo_sync_2_fifo_mem_generic_2__wr <= fbus1_write;
    fifo_sync_2_fifo_mem_generic_2__addr_w <= fifo_sync_2_wptr;
    fifo_sync_2_fifo_mem_generic_2__din <= fbus1_write_data;
end


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_2_FIFO_MEM_GENERIC_2_RTL_MEM
    if (fifo_sync_2_fifo_mem_generic_2__wr) begin
        fifo_sync_2_fifo_mem_generic_2_mem[fifo_sync_2_fifo_mem_generic_2__addr_w] <= fifo_sync_2_fifo_mem_generic_2__din;
    end
end


always @(posedge clk, posedge reset) begin: RLEDOUBLEFIFO_FIFO_SYNC_2_BEH_FIFO
    if (reset == 1) begin
        fifo_sync_2_wptr <= 00;
        fbus1_empty <= 1;
        fifo_sync_2_rptr <= 00;
        fifo_sync_2_fbus_full <= 0;
        fifo_sync_2_vld <= 0;
    end
    else begin
        if (fifo_sync_2_fbus_clear) begin
            fifo_sync_2_wptr <= 0;
            fifo_sync_2_rptr <= 0;
            fifo_sync_2_fbus_full <= 1'b0;
            fbus1_empty <= 1'b1;
        end
        else if ((fbus1_read && (!fbus1_write))) begin
            fifo_sync_2_fbus_full <= 1'b0;
            if ((!fbus1_empty)) begin
                fifo_sync_2_rptr <= (fifo_sync_2_rptr + 1);
            end
            if (($signed({1'b0, fifo_sync_2_rptr}) == ($signed({1'b0, fifo_sync_2_wptr}) - 1))) begin
                fbus1_empty <= 1'b1;
            end
        end
        else if ((fbus1_write && (!fbus1_read))) begin
            fbus1_empty <= 1'b0;
            if ((!fifo_sync_2_fbus_full)) begin
                fifo_sync_2_wptr <= (fifo_sync_2_wptr + 1);
            end
            if (($signed({1'b0, fifo_sync_2_wptr}) == ($signed({1'b0, fifo_sync_2_rptr}) - 1))) begin
                fifo_sync_2_fbus_full <= 1'b1;
            end
        end
        else if ((fbus1_write && fbus1_read)) begin
            fifo_sync_2_wptr <= (fifo_sync_2_wptr + 1);
            fifo_sync_2_rptr <= (fifo_sync_2_rptr + 1);
        end
        fifo_sync_2_vld <= fbus1_read;
    end
end



assign fifo_sync_2_fbus_read_valid = (fifo_sync_2_vld & fbus1_read);


always @(posedge clk, posedge reset) begin: RLEDOUBLEFIFO_FIFO_SYNC_2_DBG_OCCUPANCY
    integer f;
    integer v;
    if (reset == 1) begin
        fifo_sync_2_nvacant <= 40;
        fifo_sync_2_ntenant <= 00;
    end
    else begin
        if (fifo_sync_2_fbus_clear) begin
            fifo_sync_2_nvacant <= 64;
            fifo_sync_2_ntenant <= 0;
        end
        else begin
            v = fifo_sync_2_nvacant;
            f = fifo_sync_2_ntenant;
            if (fifo_sync_2_fbus_read_valid) begin
                v = (v + 1);
                f = (f - 1);
            end
            if (fbus1_write) begin
                v = (v - 1);
                f = (f + 1);
            end
            fifo_sync_2_nvacant <= v;
            fifo_sync_2_ntenant <= f;
        end
    end
end



assign fbus2_read_data = fifo_sync_3_fifo_mem_generic_3__dout;


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_RD
    fifo_sync_3_fifo_mem_generic_3__dout <= fifo_sync_3_fifo_mem_generic_3_mem[fifo_sync_3_rptr];
end


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_WR
    fifo_sync_3_fifo_mem_generic_3__wr <= fbus2_write;
    fifo_sync_3_fifo_mem_generic_3__addr_w <= fifo_sync_3_wptr;
    fifo_sync_3_fifo_mem_generic_3__din <= fbus2_write_data;
end


always @(posedge clk) begin: RLEDOUBLEFIFO_FIFO_SYNC_3_FIFO_MEM_GENERIC_3_RTL_MEM
    if (fifo_sync_3_fifo_mem_generic_3__wr) begin
        fifo_sync_3_fifo_mem_generic_3_mem[fifo_sync_3_fifo_mem_generic_3__addr_w] <= fifo_sync_3_fifo_mem_generic_3__din;
    end
end


always @(posedge clk, posedge reset) begin: RLEDOUBLEFIFO_FIFO_SYNC_3_BEH_FIFO
    if (reset == 1) begin
        fifo_sync_3_wptr <= 00;
        fbus2_empty <= 1;
        fifo_sync_3_rptr <= 00;
        fifo_sync_3_fbus_full <= 0;
        fifo_sync_3_vld <= 0;
    end
    else begin
        if (fifo_sync_3_fbus_clear) begin
            fifo_sync_3_wptr <= 0;
            fifo_sync_3_rptr <= 0;
            fifo_sync_3_fbus_full <= 1'b0;
            fbus2_empty <= 1'b1;
        end
        else if ((fbus2_read && (!fbus2_write))) begin
            fifo_sync_3_fbus_full <= 1'b0;
            if ((!fbus2_empty)) begin
                fifo_sync_3_rptr <= (fifo_sync_3_rptr + 1);
            end
            if (($signed({1'b0, fifo_sync_3_rptr}) == ($signed({1'b0, fifo_sync_3_wptr}) - 1))) begin
                fbus2_empty <= 1'b1;
            end
        end
        else if ((fbus2_write && (!fbus2_read))) begin
            fbus2_empty <= 1'b0;
            if ((!fifo_sync_3_fbus_full)) begin
                fifo_sync_3_wptr <= (fifo_sync_3_wptr + 1);
            end
            if (($signed({1'b0, fifo_sync_3_wptr}) == ($signed({1'b0, fifo_sync_3_rptr}) - 1))) begin
                fifo_sync_3_fbus_full <= 1'b1;
            end
        end
        else if ((fbus2_write && fbus2_read)) begin
            fifo_sync_3_wptr <= (fifo_sync_3_wptr + 1);
            fifo_sync_3_rptr <= (fifo_sync_3_rptr + 1);
        end
        fifo_sync_3_vld <= fbus2_read;
    end
end



assign fifo_sync_3_fbus_read_valid = (fifo_sync_3_vld & fbus2_read);


always @(posedge clk, posedge reset) begin: RLEDOUBLEFIFO_FIFO_SYNC_3_DBG_OCCUPANCY
    integer f;
    integer v;
    if (reset == 1) begin
        fifo_sync_3_nvacant <= 40;
        fifo_sync_3_ntenant <= 00;
    end
    else begin
        if (fifo_sync_3_fbus_clear) begin
            fifo_sync_3_nvacant <= 64;
            fifo_sync_3_ntenant <= 0;
        end
        else begin
            v = fifo_sync_3_nvacant;
            f = fifo_sync_3_ntenant;
            if (fifo_sync_3_fbus_read_valid) begin
                v = (v + 1);
                f = (f - 1);
            end
            if (fbus2_write) begin
                v = (v - 1);
                f = (f + 1);
            end
            fifo_sync_3_nvacant <= v;
            fifo_sync_3_ntenant <= f;
        end
    end
end



assign fbus1_write_data = fifo_data_in;
assign fbus2_write_data = fifo_data_in;


always @(posedge clk, posedge reset) begin: RLEDOUBLEFIFO_MUX2_LOGIC
    if (reset == 1) begin
        fbus1_write <= 0;
        fbus2_write <= 0;
        fifo_data_in <= 00000;
    end
    else begin
        if ((buf_sel == 0)) begin
            fbus1_write <= wren;
        end
        else begin
            fbus2_write <= wren;
        end
        fifo_data_in <= data_in;
    end
end



assign fbus1_read = (buf_sel == 1) ? rd_req : 0;
assign fbus2_read = (buf_sel == 0) ? rd_req : 0;
assign data_out = (buf_sel == 1) ? fbus1_read_data : fbus2_read_data;
assign fifo_empty = (buf_sel == 1) ? fbus1_empty : fbus2_empty;

endmodule
