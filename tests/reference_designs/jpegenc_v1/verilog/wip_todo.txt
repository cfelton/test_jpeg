BUF_FIFO.v:    /// @todo: better home, these were in a global package in
BUF_FIFO.v-    ///    the VHDL version.  Might need to use a header file,
BUF_FIFO.v-    ///    don't believe the 
BUF_FIFO.v-    parameter C_EXTRA_LINES = 8;
--
ByteStuffer.v:  /// @todo: these were constants from JPEG_PKG, not sure if
ByteStuffer.v-  ///    this should be repeated in each module or in a header
ByteStuffer.v-  ///    (ugh preprocessor) not sure if iverilog supports SV pkg.
ByteStuffer.v-  parameter C_HDR_SIZE = 623
--
CtrlSM.v:    /// @todo: verify correct encoding for states
CtrlSM.v-    localparam
CtrlSM.v-      IDLES = 1,
CtrlSM.v-      JFIF  = 2,
--
DCT1D.v:  /// @todo: these were constants from MDCT_PKG, not sure if
DCT1D.v-  ///    this should be repeated in each module or in a header
DCT1D.v-  ///    (ugh preprocessor) not sure if iverilog supports SV pkg.
DCT1D.v-  parameter IP_W        = 8,  
--
DCT2D.v:  /// @todo: these were constnats from MDCT_PKG, not sure if
DCT2D.v-  ///    this should be repeated in each module or in a header
DCT2D.v-  ///    (ugh preprocessor) not sure if iverilog supports SV pkg.
DCT2D.v-  parameter IP_W        = 8,  
--
DCT2D.v:	    /// @todo see if these need to be cast to signed ($signed)
DCT2D.v-	    ///    both DCT1D and DCT2D
DCT2D.v-	    
DCT2D.v-	    if (1'b0 == even_not_odd) begin
--
FDCT.v:			      /// @todo verify this is correct
FDCT.v-			      fram1_raddr <= {1'b0, fram1_line_cnt_p1, 3'b000};
FDCT.v-			  end
FDCT.v-		      end
--
HostIF.v:    // @todo: verify these constants, some converted funky?
HostIF.v-    parameter C_ENC_START_REG        = 32'h0000_0000;
HostIF.v-    parameter C_IMAGE_SIZE_REG       = 32'h0000_0004;
HostIF.v-    parameter C_IMAGE_RAM_ACCESS_REG = 32'h0000_0008;
--
Huffman.v:		      // @todo: check manual conversion
Huffman.v-		      //word_reg <= shift_left(word_reg, to_integer(num_fifo_wrs & "000"));
Huffman.v-		      word_reg <= (word_reg << {num_fifo_wrs, 3'b000});
Huffman.v-		      
--
Huffman.v:		      // @todo: check manual conversion
Huffman.v-		      //word_reg <= shift_left(word_reg, to_integer(num_fifo_wrs & "000"));
Huffman.v-		      word_reg <= (word_reg << {num_fifo_wrs, 3'b000});
Huffman.v-		      
--
JFIFGen.v:  /// @todo: these were constnats from JPEG_PKG, not sure if
JFIFGen.v-  ///    this should be repeated in each module or in a header
JFIFGen.v-  ///    (ugh preprocessor) not sure if iverilog supports SV pkg.
JFIFGen.v-  parameter C_HDR_SIZE = 623
--
JpegEnc.v:	 // @todo: fix "settings"
JpegEnc.v-	 //.fdct_sm_settings   (fdct_sm_settings	   ),
JpegEnc.v-  	 
JpegEnc.v-	 //-- BUF_FIFO	      			   
--
JpegEnc.v:	 	 // @todo: fix "settings"
JpegEnc.v-	 //.zig_sm_settings    (zig_sm_settings  ),
JpegEnc.v-  	 
JpegEnc.v-	 //-- Quantizer      			    
--
JpegEnc.v:	 // @todo: fix "settings"		   
JpegEnc.v-	 //.qua_sm_settings    (qua_sm_settings	   ),
JpegEnc.v-  	
JpegEnc.v-	 //-- RLE	      			   ),
--
JpegEnc.v:	 // @todo: fix "settings"
JpegEnc.v-	 //.rle_sm_settings    (rle_sm_settings,	  ),
JpegEnc.v-  	 
JpegEnc.v-	 //-- HUFFMAN	      			  
--
JpegEnc.v:  // @todo: fix, manually instantiate, converter doesn't handle  
JpegEnc.v-  //U_Huffman : entity work.Huffman
JpegEnc.v-    Huffman
JpegEnc.v-      U_Huffman
--
JpegEnc.v:  // @todo: fix, manually instantiate, converter doesn't handle  
JpegEnc.v-  //U_ByteStuffer : entity work.ByteStuffer
JpegEnc.v-  //port map
JpegEnc.v-    ByteStuffer
--
MDCT.v:    // @todo: fix, converter doesn't handle user defined types
MDCT.v-    
MDCT.v-    //signal romedatao_s          : T_ROM1DATAO; 
MDCT.v-    //signal romodatao_s          : T_ROM1DATAO;
--
RAMZ.v:    /// @todo: memory size needs to be a function of the
RAMZ.v-    ///    parameters
RAMZ.v-    localparam MEM_SIZE = 2**RAMADDR_W;
RAMZ.v-    reg [RAMDATA_W-1:0]  mem [0:MEM_SIZE-1];
--
RLE.v:            // @todo: fix
RLE.v-            //acc_reg <= RESIZE(SIGNED(di),RAMDATA_W+1) - RESIZE(prev_dc_reg_0,RAMDATA_W+1);
RLE.v-	     acc_reg <= $signed(di) - prev_dc_reg_0;	     
RLE.v-             prev_dc_reg_0 <= (di);
--
RLE.v:            // @todo: fix              
RLE.v-            //acc_reg <= RESIZE(SIGNED(di),RAMDATA_W+1) - RESIZE(prev_dc_reg_1,RAMDATA_W+1);
RLE.v-	     acc_reg <= $signed(di) - prev_dc_reg_1;
RLE.v-             prev_dc_reg_1 <= (di);
--
RLE.v:            // @todo: fix              
RLE.v-            //acc_reg <= RESIZE(SIGNED(di),RAMDATA_W+1) - RESIZE(prev_dc_reg_2,RAMDATA_W+1);
RLE.v-	     acc_reg <= $signed(di) - prev_dc_reg_2;	     
RLE.v-             prev_dc_reg_2 <= (di);
--
RLE.v:              // @todo: fix              
RLE.v-              //acc_reg        <= RESIZE(SIGNED(di),RAMDATA_W+1);              
RLE.v-              runlength_reg <= zero_cnt[3:0];
RLE.v-              zero_cnt <= {6{1'b0}};
--
RLE.v:          // @todo: fix          
RLE.v-          //acc_reg        <= RESIZE(SIGNED(zrl_di),RAMDATA_W+1);
RLE.v-          runlength_reg <= zero_cnt[3:0];
RLE.v-          if(((zrl_di)) == 0) begin
--
RLE.v:      // @todo: need to manually fix (doh)
RLE.v-      // compute Symbol-1 Size
RLE.v-      //if acc_reg = TO_SIGNED(-1,RAMDATA_W+1) then
RLE.v-      //  size_reg <= TO_UNSIGNED(1,SIZE_REG_C);
--
RLE.v:      // @todo: fix, need to manually fix
RLE.v-      // compute Symbol-1 Size
RLE.v-      // positive input
RLE.v-      //if acc_reg = TO_SIGNED(1,RAMDATA_W+1) then
--
ZIGZAG.v:   // @todo: need to manually convert the ZIGZIG RAM'r
ZIGZAG.v-   //type ZIGZAG_TYPE is   array (0 to 2**RAMADDR_W-1) of INTEGER range 0 to 2**RAMADDR_W-1;
ZIGZAG.v-   //constant ZIGZAG_ARRAY : ZIGZAG_TYPE := 
ZIGZAG.v-   //                    (
--
ZIGZAG.v:      // @todo: ...
ZIGZAG.v-   end
ZIGZAG.v-   
ZIGZAG.v-   wire 		    fifo_wr;
